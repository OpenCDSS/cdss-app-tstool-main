#!/bin/bash
(set -o igncr) 2>/dev/null && set -o igncr; # this comment is required
# The above line ensures that the script can be run on Cygwin/Linux even with Windows CRNL
#
# tstool - script to run TSTool on Linux and Mac
#

# Supporting functions, alphabetized

checkConfiguration() {
	# Check to confirm the configuration.
	local testfile
	# Verify that the installation folder exists
	if [ ! -d "${installFolder}" ]; then
		echo ""
		echo "TSTool installation folder ${installFolder} does not exist."
		echo ""
		exit 1
	fi
	# Verify that expected main jar file exists
	# - this is consistent with the Java version used to compile the application
	testFile="${installFolder}/bin/cdss-app-tstool-main_18.jar"
	if [ ! -e "${testFile}" ]; then
		echo ""
		echo "TSTool installation folder ${installFolder} does not seem correct."
		echo "The main jar file does not exist:"
		echo "  ${testFile}"
		echo ""
		exit 1
	fi
}

# Determine the operating system that is running the script
# - global variable ${operatingSystem} is set
checkOperatingSystem() {
	local os

	if [ ! -z "${operatingSystem}" ]; then
		# Have already checked operating system so return
		return
	fi
	operatingSystem="unknown"
	os=$(uname | tr [a-z] [A-Z])
	case "${os}" in
		CYGWIN*)
			operatingSystem="cygwin"
			;;
		DARWIN*)
			operatingSystem="mac"
			;;
		LINUX*)
			operatingSystem="linux"
			# Also determine the distribution
			# - TODO smalers 2019-08-01 for now hard-code debian
			# - could make this dynamic to support various distributions
			# - mainly care about the syntax needed to find appropriate Java, etc.
			linuxDistro="debian"
			#linuxDistroVersion="jessie"
			;;
		MINGW*)
			operatingSystem="mingw"
			;;
		*)
			# Don't know the operating system
			echo "Cannot determine operating system.  Exiting."
			exit 1
	esac
}

# Determine the location of the Java runtime environment
# - set the jreExe global variable to Java executable that it is used to run TSTool
# - search for candidate Java 8 programs and confirm the version is 8
determineJavaExe() {
	local jreExeCandidates javaExe8VersionCount javaExeTry
	local java8AlternativeExe java8AlternativeExeCount
	# First check to see if available in TSTool distribution
	# - use standard and likely folders used with TSTool on Linux
	# - also check likely folders

	# Get the likely locations of Java from the operating system
	if [ "$linuxDistro" = "debian" ]; then
		# Get a list of available Java
		# - for now assume openjdk package names like:
		#   update-alternatives --list java
		#   /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java
		#   /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
		# - may be able to add Java newer than 8 but for now filter to only Java 8
		#   (need to test with newer Java to make sure it works)
		java8AlternativeExeCount=$(update-alternatives --list java | grep 'java-8' | wc -l)
		java8AlternativeExe=$(update-alternatives --list java | grep 'java-8' | head -1)
		# Make sure only one option is used (TODO improve logic to handle more)
		if [ "$java8AlternativeExeCount" -eq 0 ]; then
			echo "Found NO Java 8 alternatives on system.  Will check standard locations."
		else
			echo "Found ${java8AlternativeExeCount} Java 8 alternatives on system (will check first found)"
		fi
	fi
	# The candidate java8 programs are checked in order so list the best candidates first
	# - variables like ${java8AlternativeExe} if not defined will not add to the list so OK
	jreExeCandidates=(${installFolder}/jre_18/bin/java ${installFolder}/jre8/bin/java ${java8AlternativeExe} /usr/bin/java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java java)
	javaExe=""
	for javaExeTry in "${jreExeCandidates[@]}"; do
		echo "Checking candidate java program for existence and Java 8:  ${javaExeTry}"
		if [ -e "${javaExeTry}" ]; then
			# Java executable file exists, check the version
			# - version may be printed to stderr rather than stdout
			javaExe8VersionCount=$(${javaExeTry} -version 2>&1 | grep '1.8.' | wc -l)
			if [ "${javaExe8VersionCount}" -ne 0 ]; then
				# Found a Java 8 to use
				javaExe=${javaExeTry}
				echo "   ...found Java8 'java' program to use"
				break
			else
				echo "   ...does not appear to be Java 8 using: ${javaExeTry} -version"
			fi
		fi
	done
	if [ -z "${javaExe}" -o "${javaExe}" = "" ]; then
		echo "Unable to determine Java8 'java' program needed by TSTool."
		echo "Need to install Java 8 (does not need to be the default Java)."
		exit 1
	fi
}

# Main entry point into the script

# Folder where tstool script is located, should be the "bin" folder in a TSTool install
scriptFolder=$(cd $(dirname "$0") && pwd)
scriptName=$(basename $0)
# Adjust the folder if a symbolic link such as /usr/bin/tstool
if [ -L $0 ]; then
	linkTarget=$(readlink -f $0)
	scriptLink=$0
	scriptFolder=$(dirname ${linkTarget})
	echo "tstool script is a symbolic link:"
	echo "    link: $scriptLink"
	echo "  target: $scriptFolder"
fi
binFolder=${scriptFolder}
# Installation home for TSTool, under which will be bin, logs, system, etc.
installFolder=$(dirname ${scriptFolder})

# Get the operating system
checkOperatingSystem

# Check configuration main folders and files
checkConfiguration

# Determine the Java executable
# - sets the javaExe global variable
determineJavaExe

# use the bin folder for the classpath.

# If TSTool is running out of memory, increase the -Xmx option below
# (maximum megabytes of memory allowed for TSTool).  This seems to go up to 
# about 1200mx maximum on 32bit operating systems.
# On the other hand, if an error is being shown that the Java virtual machine can't start,
# may need to reduce the value because Java 7 takes up more memory.
#
# If graphics misbehave, try using the following:
#  -Dsun.java2d.noddraw=true
#
# If http traffic is routed through a proxy, use the following to use the
# system proxy settings automatically so that web services work
# (actually this is an OK default):
#  -Djava.net.useSystemProxies=true
#
# If running in headless mode, the following may be needed (see http://www.jfree.org/phpBB2/viewtopic.php?t=1012):
#  -Djava.awt.headless=true
#
# The above will interfere with GUI mode so a separate batch file may be needed.
#
javaCommand="${javaExe} -Xmx1024m -Djava.net.useSystemProxies=true"

# Run TSTool, passing the original command line arguments
# - make sure that asterisk is not expanded, because want Java to do it to find *.jar
mainClass="DWR.DMI.tstool.TSToolMain"
command="${javaCommand} -classpath ${binFolder}/"
command+='*'
command+=" ${mainClass} -home ${installFolder} $@"
# Run the TSTool command...
# - use quotes in echo to avoid filename expansion in echo statement
echo "Running:"
echo "$command"

# Cannot use:
#  ${command}        because filename expansion will include all files in path including bash files
#  "${command}"      because entire command is run as the program rather than space-delimited arguments
${javaCommand} -classpath ${binFolder}/\* ${mainClass} -home ${installFolder} $@

# Exit with status from java
exit $?
