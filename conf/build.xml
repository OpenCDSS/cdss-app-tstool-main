<!-- Author  :  Kurt Tometich
	 Date    :  9/19/2006
	 Purpose :  provides functions to compile, test and
	            run source code
	 Targets :
	 			clean
	 			compile
				compileTest
				quickTest
				fullTest
	 			runDev
	 			runOp
	 			javadoc
				jar
	 			help
	 			
-->

<project name="buildTemplate" basedir="../" default="compile">

	<!-- === Set file separator depending on OS ===-->
	<condition property="sep" value="/">
	<and>
       		<os family="unix" />
	</and>
	</condition>
	<condition property="sep" value="\">
	<and>
       		<os family="windows" />
	</and>
	</condition>

	<!--============= General Properties =============-->
	<property name="src.dir"	     location="src"         />
	<property name="build.dir"	     location="build"       />
	<property name="dist.dir"        location="dist" />
	<property name="doc.dir"		 location="doc" />
	<property name="buildwork.dir"   location="${build.dir}${sep}work"   />
	<property name="buildtest.dir"   location="build${sep}test"      />
	<property name="test.dir"	     location="test${sep}unit${sep}src"        />
	<property name="testOp.dir"      location="test${sep}operational" />
	<property name="jdoc.dir"	     location="doc${sep}javadoc" />
	<property name="ext.dir"         location="externals"       />
	<property name="graphics.dir"    location="graphics"        />
	<property name="system.dir"  	 location="test${sep}system"        />
	<property name="logs.dir"    	 location="test${sep}logs"        />
	<property name="package"     	 value="DWR${sep}DMI${sep}tstool" />
	<property name="executable"  	 location="I:${sep}develop${sep}jdk_142${sep}bin${sep}javac" />
	<property name="classname"   	 value="DWR.DMI.tstool.tstool" />
	<property name="quickSuite"  	 value="DWR.DMI.tstool.RegressionTestSuite" />
	<property name="fullSuite"   	 value="DWR.DMI.tstool.testAll" />
	<property name="jarfname"    	 value="tstool.jar" />
	<property name="regTest.dir"	 location="test${sep}regression${sep}src" />
	<property name="command_file"    value="Regression.TSTool" />
	
	<!--================ Dependencies ==================-->
	<property name="d1"	 value="${ext.dir}${sep}HydroBaseDMI_142.jar"    />
	<property name="d2"	 value="${ext.dir}${sep}msbase.jar" 	     />
	<property name="d3"  value="${ext.dir}${sep}mssqlserver.jar"         />
	<property name="d4"	 value="${ext.dir}${sep}msutil.jar"              />
	<property name="d5"	 value="${ext.dir}${sep}NWSRFS_DMI_142.jar"      />
	<property name="d6"	 value="${ext.dir}${sep}RiversideDB_DMI_142.jar" />
	<property name="d7"	 value="${ext.dir}${sep}RTi_142.jar"             />
	<property name="d8"	 value="${ext.dir}${sep}StateCU_142.jar"         />
	<property name="d9"	 value="${ext.dir}${sep}StateMod_142.jar"        />
	
	<!-- =========== Compiler Properties ===============-->
	<property name="compiler" value="modern" />
	

	<!-- set classpath -->
	<path id="classpath">
		<pathelement location="${d1}"/>
		<pathelement location="${d2}"/>
		<pathelement location="${d3}"/>
		<pathelement location="${d4}"/>
		<pathelement location="${d5}"/>
		<pathelement location="${d6}"/>
		<pathelement location="${d7}"/>
		<pathelement location="${d8}"/>
		<pathelement location="${d9}"/>
		<pathelement location="${buildwork.dir}"/>
		<pathelement location="${dist.dir}${sep}${jarfname}" />
		<pathelement location="."/>
	</path>
	
	<path id="classpathOp">
			<pathelement location="${d1}"/>
			<pathelement location="${d2}"/>
			<pathelement location="${d3}"/>
			<pathelement location="${d4}"/>
			<pathelement location="${d5}"/>
			<pathelement location="${d6}"/>
			<pathelement location="${d7}"/>
			<pathelement location="${d8}"/>
			<pathelement location="${d9}"/>
			<pathelement location="${dist.dir}${sep}${jarfname}" />
			<pathelement location="."/>
	</path>
	
	

	<!-- current timestamp -->
	<tstamp>
	  <format property="TODAY" pattern="MM/dd/yyyy hh:mm" locale="en"/> 	
  	  <format property="jarDate" pattern="yyyy-MM-dd hh:mm" locale="en" />
	</tstamp>
	
	

<!--===================================================
	Target:   clean
	Function: cleans the build/work and build/test
	          directories to ensure a clean compilation
====================================================-->
<target name="clean" description="remove compiled files">
	
	<!-- delete build stuff -->
	<delete dir="${buildwork.dir}" />
	<delete dir="${build.dir}" />

	<!-- delete javadoc stuff -->
	<delete dir="${jdoc.dir}" />
	
	<!-- delete runtime directories -->
	<delete dir="${system.dir}" />
	<delete dir="${logs.dir}" />
	
	
</target>

<!--===================================================
	Target:   compile
	Function: compiles code for this project and places
			  the compiled code in the build/work dir
====================================================-->
<target name="compile" >

	<echo>
********* COMPILING SOURCE ************
	  destdir     : ${buildwork.dir}
	  executable  : ${executable}
	  compiler    : ${compiler}
***************************************
	</echo>

	<mkdir dir="${buildwork.dir}" />
	
	<javac srcdir 		= "${src.dir}${sep}${package}"
           destdir 		= "${buildwork.dir}"
		   classpathref = "classpath"
           debug 		= "on"
	       fork 		= "yes"
	       listfiles 	= "true"
	       deprecation 	= "true"
	       executable 	= "${executable}"
	       compiler 	= "${compiler}"
	/>

</target>


<!--========================================================
	Target: compileTest
	Function: to compile the code under test/src
==========================================================-->
<target name="compileTest" depends="compile">

	<echo>
********* COMPILING TEST ************
	  srcdir      : ${test.dir}${sep}${package}
	  destdir     : ${build.dir}${sep}test
	  executable  : ${executable}
	  compiler    : ${compiler}
***************************************
	</echo>

	<mkdir dir="${build.dir}${sep}test" />
	
	<javac srcdir 		= "${test.dir}${sep}${package}"
	       destdir 	    = "${build.dir}${sep}test"
           classpathref = "classpath"
           debug 		= "on"
	       fork 		= "yes"
	       listfiles 	= "true"
	       deprecation 	= "true"
	       executable 	= "${executable}"
	       compiler 	= "${compiler}"
	/>

</target>


<!--===================================================
	Target:   quickTest
	Function: runs Junit tests and outputs results
====================================================-->
<target name="quickTest" depends="compileTest">

	<echo>
********* RUNNING JUNIT TESTS ************
          suite       : ${package}${quickSuite}
***************************************
	</echo>

	<java classname="junit.textui.TestRunner"
		fork="true"
		jvm="${jhome}${sep}java.exe"
		dir="${build.dir}${sep}test">
		<jvmarg value="-mx128m"/>
		<arg value="${quickSuite}"/>
		<classpath refid="classpath"/>		
	</java>

</target>


<!--===================================================
	Target:   fullTest 
	Function: runs all Junit tests and outputs results
====================================================-->
<target name="fullTest" depends="compileTest">

	<echo>
********* RUNNING JUNIT TESTS ************
          suite       : ${package}${fullSuite}
***************************************
	</echo>

	<java classname="junit.textui.TestRunner"
		fork="true"
		jvm="${jhome}${sep}java.exe"
		dir="${build.dir}${sep}test" >
		<jvmarg value="-mx128m"/>
		<arg value="${fullSuite}"/>
		<classpath refid="classpath"/>		
	</java>

</target>

	
<!--===================================================
	Target:   runDev
	Function: runs the executable or java class from
			  the build directory for quick development
			  testing
====================================================-->
<target name="runDev" depends="compile">
	
	<echo message="HOME:   ${testOp.dir}" />
	
	<java classname="${classname}" fork="true">
		<jvmarg    value = "-mx256m" />
		<jvmarg    value = "-Djava.compiler=NONE" />
		<arg       value = "-home" />
		<arg	   value = "${testOp.dir}" />
		<classpath refid = "classpath" />   
	</java>	

</target>


<!--===================================================
	Target:   runOp
	Function: runs the executable from the dist jar
			  for operational testing
====================================================-->
	<target name="runOp" depends="jar">
		
		<echo message="HOME:   ${testOp.dir}" />
		
		<java classname="${classname}" fork="true">
			<jvmarg    value = "-mx256m" />
			<jvmarg    value = "-Djava.compiler=NONE" />
			<arg       value = "-home" />
			<arg	   value = "${testOp.dir}" />
			<classpath refid = "classpathOp" />   
		</java>	

	</target>
	
	
<!--===================================================
	Target:   javadoc
	Function: generates the javadocs for this product
====================================================-->
<target name="javadoc">

	<echo>
********** Creating Javadocs **************
   Destination:     ${jdoc.dir}
   From Dir   :     ${src.dir}${sep}${package} 
*******************************************
	</echo>
	
	<!-- cleanup old javadocs -->
	<delete dir="${jdoc.dir}" />

	<!-- make dir jdocs --> 
	<mkdir dir="${jdoc.dir}" />

	<javadoc destdir="${jdoc.dir}" >
		<classpath refid="classpath"/>
		<fileset dir="${src.dir}${sep}${package}" >
    	  		<include name="*.java"/>
    		</fileset>
	</javadoc>	


</target>


<!--=====================================================
	Target: jar 
=======================================================-->
<target name="jar" depends="compile, javadoc" >
    
	<echo>
********** Creating jar file *****************
   Destination:    ${dist.dir}
   source dir :    ${buildwork.dir}
   jar filename:   ${jarfname}
**********************************************
	</echo>

	<!-- copy docs folder into build for the jar 
	<copy todir="${buildwork.dir}">
	<fileset dir=".">
	<include name="doc${sep}**${sep}*" />
	<include name="graphics${sep}**${sep}*" />
	</fileset>
	</copy>
	-->
	
	<copy todir="${buildwork.dir}${sep}DWR{sep}DMI{sep}tstool" >
		<fileset dir="graphics" />
	</copy>
	
    <mkdir dir="${dist.dir}"/>
    <jar jarfile="${dist.dir}${sep}${jarfname}" basedir="${buildwork.dir}" >
	<manifest >
    	<attribute name="Author"    value="Riverside Technology, inc. (RTi)"/>
      	<attribute name="Address1"  value="2290 E. Prospect Road, Suite 1"/>
      	<attribute name="Address2"  value="Fort Collins, CO 80525"/>
        <attribute name="Phone"     value="970-484-7573"/>
	<attribute name="Web"       value="http://www.riverside.com"/>
	<attribute name="BuildDate" value="${jarDate}"/>
        <attribute name="Contents"  value="Contains tstool Classes"/>
      </manifest>

    </jar>

</target>

<!--=================================================
	Target: regTest
	Function: to regression test this product.  Runs 
	          TSTool using a commands file and sends
	          the output to the Regression results
	          folder.  Next, a Perl script is run to
	          parse the output from TSTool and generate
	          readable results.  If a test fails then 
	          a developer should check out the log file
	          under Regression results for more info. 
===================================================-->
<target name="regTest"  >
	
	<java classname="${classname}" fork="true" >
		<jvmarg    value = "-mx256m" />
		<jvmarg    value = "-Djava.compiler=NONE" />
		<arg       value = "-home" />
		<arg	   value = "${testOp.dir}" />
		<arg	   value = "-commands" />
		<arg	   value = "${regTest.dir}${sep}${command_file}" />
		<classpath refid = "classpathOp" />   
	</java>	
	
	<!-- run perl script to parse output and display results -->
	<exec dir="${regTest.dir}" executable="perl" >
		<arg value="parseOutput.pl" />
	</exec>
	
</target>
	

<!--===================================================
	Target:   help
	Function: prints out info on targets and properties
====================================================-->
<target name="help">
	<echo>
		------------- build.xml Help ---------------
		VALID TARGETS:

                compile      uses properies $src and $build

		compileTest  compiles the test source
                             code from $test to the
                             $build/$test dir

            	quickTest    runs the quick suite of junit
                             tests for this product.  Uses 
                             $build/$test as source and 
                             and $quickSuite as suite name

            	fullTest     runs the junit tests for
                             all classes.  Uses $build/$test
                             as the source and $fullTest as name
	

		test         runs the junit tests for
                             this product.  uses 

		clean        cleans the build directories
                             using 

		runDev       runs the application from the class files in
					 build${sep}work
		
		runOp		 runs the application from the jar file in
					 dist folder

		javadoc      generates the javadocs using
		             using $jdoc as dest dir and $src/$package
		             as the source directory  

		jar          jars class files into $jarfname    
		             under $dist

		help         shows this message

		

		PROPERTIES:

            	Everything with a '$' sign is a property.
            	To override a property use: -Dpropertyname=value
            	Example: ant -Dsrc=C:/sandbox
		
	</echo>

</target>


</project>


