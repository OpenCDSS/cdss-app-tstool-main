<!-- Author  :  Kurt Tometich
	 Date    :  9/19/2006
	 Purpose :  provides functions to compile, test and
	            run source code
	 Targets :
	 			clean
	 			compile
				compileTest
				quickTest
				fullTest
	 			run
	 			javadoc
				jar
	 			help
	 			
-->

<project name="buildTemplate" basedir="../" default="compile">

	<!-- === Set file separator depending on OS ===-->
	<condition property="sep" value="/">
	<and>
       		<os family="unix" />
	</and>
	</condition>
	<condition property="sep" value="\">
	<and>
       		<os family="windows" />
	</and>
	</condition>

	<!--============= General Properties =============-->
	<property name="src"	     location="src"         />
	<property name="build"	     location="build"       />
	<property name="dist"        location="dist" />
	<property name="buildwork"   location="${build}${sep}work"   />
	<property name="buildtest"   location="build${sep}test"      />
	<property name="test"	     location="test${sep}unit${sep}src"        />
	<property name="jdoc"	     location="doc${sep}javadoc" />
	<property name="ext"         location="externals"       />
	<property name="graphics"    location="graphics"        />
	<property name="package"     value="DWR${sep}DMI${sep}tstool" />
	<property name="executable"  location="I:${sep}develop${sep}jdk_142${sep}bin${sep}javac" />
	<property name="classname"   value="DWR.DMI.tstool.tstool" />
	<property name="quickSuite"  value="DWR.DMI.tstool.RegressionTestSuite" />
	<property name="fullSuite"   value="DWR.DMI.tstool.testAll" />
	<property name="jarfname"    value="tstool.jar" />
	
	<!--================ Dependencies ==================-->
	<property name="d1"	 value="${ext}${sep}HydroBaseDMI_142.jar"    />
	<property name="d2"	 value="${ext}${sep}msbase.jar" 	     />
	<property name="d3"  value="${ext}${sep}mssqlserver.jar"         />
	<property name="d4"	 value="${ext}${sep}msutil.jar"              />
	<property name="d5"	 value="${ext}${sep}NWSRFS_DMI_142.jar"      />
	<property name="d6"	 value="${ext}${sep}RiversideDB_DMI_142.jar" />
	<property name="d7"	 value="${ext}${sep}RTi_142.jar"             />
	<property name="d8"	 value="${ext}${sep}StateCU_142.jar"         />
	<property name="d9"	 value="${ext}${sep}StateMod_142.jar"        />
	
	<!-- =========== Compiler Properties ===============-->
	<property name="cp"	  value="${d1};${d2};${d3};${d4};${d5};${d6};${d7};${d8};${d9};${buildwork}${sep}${package};." />
	<property name="compiler" value="modern" />
	

	<!-- set classpath -->
	<path id="classpath">
		<pathelement location="${d1}"/>
		<pathelement location="${d2}"/>
		<pathelement location="${d3}"/>
		<pathelement location="${d4}"/>
		<pathelement location="${d5}"/>
		<pathelement location="${d6}"/>
		<pathelement location="${d7}"/>
		<pathelement location="${d8}"/>
		<pathelement location="${d9}"/>
		<pathelement location="${buildwork}${sep}${package}"/>
		<pathelement location="."/>
		<pathelement location="${buildwork}" />
	</path>

	<!-- current timestamp -->
	<tstamp>
	  <format property="TODAY" pattern="MM/dd/yyyy hh:mm" locale="en"/> 	
  	  <format property="jarDate" pattern="yyyy-MM-dd hh:mm" locale="en" />
	</tstamp>
	
	

<!--===================================================
	Target:   clean
	Function: cleans the build/work and build/test
	          directories to ensure a clean compilation
====================================================-->
<target name="clean" description="remove compiled files">
	
	<!-- delete build stuff -->
	<delete dir="${buildwork}" />
	<delete dir="${build}" />

	<!-- delete javadoc stuff -->
	<delete dir="${jdoc}" />
	
</target>

<!--===================================================
	Target:   compile
	Function: compiles code for this project and places
			  the compiled code in the build/work dir
====================================================-->
<target name="compile" depends="clean">

	<echo>
********* COMPILING SOURCE ************
	  classpath   : ${cp}

	  destdir     : ${buildwork}
	  executable  : ${executable}
	  compiler    : ${compiler}
***************************************
	</echo>

	<mkdir dir="${buildwork}" />
	
	<javac srcdir 		= "${src}${sep}${package}"
           destdir 		= "${buildwork}"
           classpath 		= "${cp}"
           debug 		= "on"
	       fork 		= "yes"
	       listfiles 	= "true"
	       deprecation 	= "true"
	       executable 	= "${executable}"
	       compiler 	= "${compiler}"
	/>

</target>


<!--========================================================
	Target: compileTest
	Function: to compile the code under test/src
==========================================================-->
<target name="compileTest" depends="compile">

	<echo>
********* COMPILING TEST ************
	  classpath   : ${cp}

	  srcdir      : ${test}${sep}${package}
	  destdir     : ${build}${sep}test
	  executable  : ${executable}
	  compiler    : ${compiler}
***************************************
	</echo>

	<mkdir dir="${build}${sep}test" />
	
	<javac srcdir 		= "${test}${sep}${package}"
	       destdir 	        = "${build}${sep}test"
               classpath 	= "${cp}"
               debug 		= "on"
	       fork 		= "yes"
	       listfiles 	= "true"
	       deprecation 	= "true"
	       executable 	= "${executable}"
	       compiler 	= "${compiler}"
	/>

</target>


<!--===================================================
	Target:   quickTest
	Function: runs Junit tests and outputs results
====================================================-->
<target name="quickTest" depends="compileTest">

	<echo>
********* RUNNING JUNIT TESTS ************
          suite       : ${package}${quickSuite}
***************************************
	</echo>

	<java classname="junit.textui.TestRunner"
		fork="true"
		jvm="${jhome}${sep}java.exe"
		dir="${build}${sep}test">
		<jvmarg value="-mx128m"/>
		<arg value="${quickSuite}"/>
		<classpath refid="classpath"/>		
	</java>

</target>


<!--===================================================
	Target:   fullTest 
	Function: runs all Junit tests and outputs results
====================================================-->
<target name="fullTest" depends="compileTest">

	<echo>
********* RUNNING JUNIT TESTS ************
          suite       : ${package}${fullSuite}
***************************************
	</echo>

	<java classname="junit.textui.TestRunner"
		fork="true"
		jvm="${jhome}${sep}java.exe"
		dir="${build}${sep}test" >
		<jvmarg value="-mx128m"/>
		<arg value="${fullSuite}"/>
		<classpath refid="classpath"/>		
	</java>

</target>

	
<!--===================================================
	Target:   run
	Function: runs the executable or java class
====================================================-->
<target name="run" depends="compile">

	<mkdir dir="${buildwork}${sep}system" />
	<mkdir dir="${buildwork}${sep}bin" />
	<copy file="conf${sep}DATAUNIT" todir="${buildwork}${sep}system" />
	<copy file="conf${sep}TSTool.cfg" todir="${buildwork}${sep}system" />
	<mkdir dir="${buildwork}${sep}logs" />
	<copy file="conf${sep}shellcon.exe" todir="${buildwork}${sep}bin"/>
	
	<java classname="${classname}" fork="true">
		<jvmarg    value = "-mx128m" />
		<jvmarg    value = "-Djava.compiler=NONE" />
		<arg       value = "-home ${buildwork}" />
		<classpath refid = "classpath" />
		       
	</java>	


</target>

	
<!--===================================================
	Target:   javadoc
	Function: generates the javadocs for this product
====================================================-->
<target name="javadoc">

	<echo>
********** Creating Javadocs **************
   Destination:     ${jdoc}
   From Dir   :     ${src}${sep}${package} 
*******************************************
	</echo>
	
	<!-- cleanup old javadocs -->
	<delete dir="${jdoc}" />

	<!-- make dir jdocs --> 
	<mkdir dir="${jdoc}" />

	<javadoc destdir="${jdoc}" >
		<classpath refid="classpath"/>
		<fileset dir="${src}${sep}${package}" >
    	  		<include name="*.java"/>
    		</fileset>
	</javadoc>	


</target>


<!--=====================================================
	Target: jar 
=======================================================-->
<target name="jar" depends="compile">
    
	<echo>
********** Creating jar file *****************
   Destination:    ${dist}
   source dir :    ${buildwork}
   jar filename:   ${jarfname}
**********************************************
	</echo>

    <mkdir dir="${dist}"/>
    <jar jarfile="${dist}${sep}${jarfname}" basedir="${buildwork}" >
	<manifest >
    	<attribute name="Author"    value="Riverside Technology, inc. (RTi)"/>
      	<attribute name="Address1"  value="2290 E. Prospect Road, Suite 1"/>
      	<attribute name="Address2"  value="Fort Collins, CO 80525"/>
        <attribute name="Phone"     value="970-484-7573"/>
	<attribute name="Web"       value="http://www.riverside.com"/>
	<attribute name="BuildDate" value="${jarDate}"/>
        <attribute name="Contents"  value="Contains tstool Classes"/>
      </manifest>

    </jar>

</target>
	

<!--===================================================
	Target:   help
	Function: prints out info on targets and properties
====================================================-->
<target name="help">
	<echo>
		------------- build.xml Help ---------------
		VALID TARGETS:

                compile      uses properies $src and $build

		compileTest  compiles the test source
                             code from $test to the
                             $build/$test dir

            	quickTest    runs the quick suite of junit
                             tests for this product.  Uses 
                             $build/$test as source and 
                             and $quickSuite as suite name

            	fullTest     runs the junit tests for
                             all classes.  Uses $build/$test
                             as the source and $fullTest as name
	

		test         runs the junit tests for
                             this product.  uses 

		clean        cleans the build directories
                             using 

		run          runs the application 

		javadoc      generates the javadocs using
		             using $jdoc as dest dir and $src/$package
		             as the source directory  

		jar          jars class files into $jarfname    
		             under $dist

		help         shows this message

		

		PROPERTIES:

            	Everything with a '$' sign is a property.
            	To override a property use: -Dpropertyname=value
            	Example: ant -Dsrc=C:/sandbox
		
	</echo>

</target>


</project>


