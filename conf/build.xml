<!-- TSTool build file 
	Author  :  Kurt Tometich
	Date    :  10/30/2006 			
-->

<project name="buildTemplate" basedir="../" default="compile">

	<!-- === Set file separator depending on OS ===-->
	<condition property="sep" value="/">
	<and>
       		<os family="unix" />
	</and>
	</condition>
	<condition property="sep" value="\">
	<and>
       		<os family="windows" />
	</and>
	</condition>

	<!-- set the javac location for OS type -->
	<condition property="executable" value="/home/sharedLibs/j2sdk1.4.2_12/bin/javac">
		<and>
	       		<os family="unix" />
		</and>
	</condition>
	<condition property="executable" value="S:\develop\jdk_142\bin\javac">
		<and>
	       		<os family="windows" />
		</and>
	</condition>
		
	<!-- set the jhome variable depending on OS type -->
	<condition property="jhome" value="/home/sharedLibs/j2sdk1.4.2_12">
		<and>
		      <os family="unix" />
		</and>
	</condition>
	<condition property="jhome" value="S:\develop\jdk_142">
		<and>
		      <os family="windows" />
		</and>
	</condition>

	
	<!--============= General Properties =============-->
	<property name="src.dir"	     location="src"         />
	<property name="build.dir"	     location="build"       />
	<property name="dist.dir"        location="dist" />
	<property name="doc.dir"		 location="doc" />
	<property name="buildwork.dir"   location="build${sep}work"   />
	<property name="buildtest.dir"   location="build${sep}test"      />
	<property name="test.dir"	     location="test${sep}unit${sep}src"        />
	<property name="CDSS_OP.dir"     location="test${sep}operational${sep}CDSS" />
	<property name="RTi_OP.dir"      location="test${sep}operational${sep}Rivertrack" />
	<property name="jdoc.dir"	     location="doc${sep}javadoc" />
	<property name="ext.dir"         location="externals"       />
	<property name="graphics.dir"    location="graphics"        />
	<property name="system.dir"  	 location="test${sep}system"        />
	<property name="logs.dir"    	 location="test${sep}logs"        />
	<property name="package"     	 value="DWR${sep}DMI${sep}tstool" />
	<property name="nsis.dir"		 location="installer" />
	<property name="executable"  	 location="S:${sep}develop${sep}jdk_150${sep}bin${sep}javac" />
	<property name="classname"   	 value="DWR.DMI.tstool.tstool" />
	<property name="testSuite"  	 value="DWR.DMI.tstool.tstoolTestSuite" />
	<property name="jarfname"    	 value="TSTool_142.jar" />
	<property name="unitTest.dir"	 location="test${sep}unit" />
	<property name="regTest.dir"	 location="test${sep}regression" />
	<property name="command_file"    value="Regression.TSTool" />
	<property name="proj_name"		 value="TSTool" />
	<property name="costello" 		 value="abbot.editor.Costello" />
	<property name="AbbotSuite"		 value="AbbotTestSuite" />
	<property name="cobertura.dir"   value="${ext.dir}${sep}cobertura" />
	<property name="buildcob.dir"    value="build${sep}cobertura" />
	<property name="CDSS_install.dir" value="installer${sep}CDSS" />
	<property name="RTi_install.dir" value="installer${sep}Rivertrack" />
	<property name="ProductTester" 	 value="${ext.dir}${sep}ProductTester" />
	<property name="nativejc"		 
		value="${ext.dir}${sep}NativeJ${sep}nativejc.exe" />
	<property name="NJProj"			 value="${proj_name}.njp" />
	<property name="tmp.dir"  location="tmp" />
	<property name="NJProj_Reg"	 	 value="${proj_name}_Regression.njp" />
	
	<path id="cobertura.classpath">
	    <fileset dir="${cobertura.dir}">
	        <include name="cobertura.jar" />
	        <include name="lib/**/*.jar" />
	    </fileset>
	</path>
   
	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
	
	
	<!--================ Dependencies ==================-->
	<property name="hydro"	 
		value="${ext.dir}${sep}HydroBaseDMI${sep}HydroBaseDMI_142.jar" />
	<property name="msbase"	 
		value="${ext.dir}${sep}Microsoft_SQL_Server_Java_ODBC_Driver${sep}msbase.jar" />
	<property name="mssqlserver"	 
			value="${ext.dir}${sep}Microsoft_SQL_Server_Java_ODBC_Driver${sep}mssqlserver.jar" />
	<property name="msutil"	 
			value="${ext.dir}${sep}Microsoft_SQL_Server_Java_ODBC_Driver${sep}msutil.jar" />
	<property name="NWSRFS_DMI"	 
		value="${ext.dir}${sep}NWSRFS_DMI${sep}NWSRFS_DMI_142_Extended.jar" />
	<property name="RiversideDB"	 
		value="${ext.dir}${sep}RiversideDB_DMI${sep}RiversideDB_DMI_142.jar" />
	<property name="RTi_Common"	 
		value="${ext.dir}${sep}RTi_Common${sep}RTi_Common_142.jar" />
	<property name="StateCU"	 
		value="${ext.dir}${sep}StateCU${sep}StateCU_142.jar" />
	<property name="StateMod"	 
		value="${ext.dir}${sep}StateMod${sep}StateMod_142.jar" />
	<property name="TS_Services"
		value="${ext.dir}${sep}TS_Services${sep}TS_Services.jar" />
	<property name="Satmon"	 
			value="${ext.dir}${sep}SatmonSysDMI${sep}SatmonSysDMI_142.jar" />
	<property name="junit"
		value="${ext.dir}${sep}junit.jar" />
	<property name="blowfish"
		value="${ext.dir}${sep}Blowfish_142.jar" />
	<property name="TSCommandProc"
		value="${ext.dir}${sep}TSCommandProcessor${sep}TSCommandProcessor_142.jar" />
	
	<!-- Abbot jar files -->
	<property name="Abbot.jar" 
		value="externals${sep}Abbot${sep}abbot.jar" />
	<property name="jdom.jar" 
		value="externals${sep}Abbot${sep}jdom.jar" />
	<property name="xerces.jar" 
		value="externals${sep}Abbot${sep}xerces.jar" />
	<property name="xml-apis.jar" 
			value="externals${sep}Abbot${sep}xml-apis.jar" />
	<property name="jgraph.jar" 
		value="externals${sep}Abbot${sep}jgraph.jar" />
	<property name="bsh.jar" 
		value="externals${sep}Abbot${sep}bsh.jar" />
	<property name="MRJ.zip" 
			value="externals${sep}Abbot${sep}MRJToolkitStubs.zip" />
	<property name="gnu-regexp.jar" 
				value="externals${sep}Abbot${sep}gnu-regexp.jar" />
	<property name="ant4eclipse.jar" 
		value="externals${sep}Abbot${sep}ant4eclipse.jar" />
	
	<!-- =========== Compiler Properties ===============-->
	<property name="compiler" value="modern" />
	

	<!-- set classpath -->
	<path id="classpath">
		<pathelement location="${junit}" />
		<pathelement location="${buildcob.dir}" />
		<pathelement location="${buildwork.dir}"/>
		<pathelement location="${buildtest.dir}" />
		<pathelement location="${hydro}"/>
		<pathelement location="${msbase}"/>
		<pathelement location="${mssqlserver}"/>
		<pathelement location="${msutil}"/>
		<pathelement location="${NWSRFS_DMI}"/>
		<pathelement location="${RiversideDB}"/>
		<pathelement location="${RTi_Common}"/>
		<pathelement location="${StateCU}"/>
		<pathelement location="${StateMod}"/>
		<pathelement location="${TS_Services}"/>
		<pathelement location="${Satmon}"/>
		<pathelement location="${Abbot.jar}" />
		<pathelement location="${buildtest.dir}" />
		<pathelement location="${jdom.jar}" />
		<pathelement location="${xerces.jar}" />
		<pathelement location="${xml-apis.jar}" />
		<pathelement location="${bsh.jar}" />
		<pathelement location="${jgraph.jar}" />
		<pathelement location="${MRJ.zip}" />
		<pathelement location="${gnu-regexp.jar}" />
		<pathelement location="${ant4eclipse.jar}" />
		<pathelement location="${blowfish}" />
		<pathelement location="${TSCommandProc}" />
		<pathelement location="."/>
	</path>
	
	<path id="classpathOp">
		<pathelement location="${hydro}"/>
		<pathelement location="${msbase}"/>
		<pathelement location="${mssqlserver}"/>
		<pathelement location="${msutil}"/>
		<pathelement location="${NWSRFS_DMI}"/>
		<pathelement location="${RiversideDB}"/>
		<pathelement location="${RTi_Common}"/>
		<pathelement location="${StateCU}"/>
		<pathelement location="${StateMod}"/>
		<pathelement location="${TS_Services}"/>
		<pathelement location="${Satmon}"/>
		<pathelement location="${blowfish}" />
		<pathelement location="${junit}" />
		<pathelement location="${Abbot.jar}" />
		<pathelement location="${buildtest.dir}" />
		<pathelement location="${jdom.jar}" />
		<pathelement location="${xerces.jar}" />
		<pathelement location="${xml-apis.jar}" />
		<pathelement location="${bsh.jar}" />
		<pathelement location="${jgraph.jar}" />
		<pathelement location="${MRJ.zip}" />
		<pathelement location="${gnu-regexp.jar}" />
		<pathelement location="${ant4eclipse.jar}" />
		<pathelement location="${dist.dir}${sep}${jarfname}" />
		<pathelement location="${TSCommandProc}" />
		<pathelement location="."/>
	</path>
	
	<!-- current timestamp -->
	<tstamp>
	  <format property="TODAY" pattern="MM/dd/yyyy hh:mm" locale="en"/> 	
  	  <format property="jarDate" pattern="yyyy-MM-dd hh:mm" locale="en" />
	</tstamp>

<!-- calls product tester ant file -->
<macrodef name="addTestsToSet">
	<attribute name="dataset" />
	<sequential>
		<ant antfile="${ext.dir}${sep}RTiBuild${sep}product-tester.xml"
			target="addTestsToSet">
			<property name="reg_dataset" value="@{dataset}"/>
		</ant>
	</sequential>
</macrodef>

<!-- calls product tester ant file -->
<macrodef name="buildProdTesterWindows">
	<attribute name="dataset" />
	<sequential>
		<ant antfile="${ext.dir}${sep}RTiBuild${sep}product-tester.xml" 
			 target="buildProdTesterWindows">
			<property name="reg_dataset" value="@{dataset}"/>
		</ant>
	</sequential>
</macrodef>
	
<!-- calls product tester ant file -->
<macrodef name="buildProdTesterLinux">
	<attribute name="dataset" />
	<sequential>
		<ant antfile="${ext.dir}${sep}RTiBuild${sep}product-tester.xml" 
			 target="buildProdTesterLinux">
			<property name="reg_dataset" value="@{dataset}"/>
		</ant>
	</sequential>
</macrodef>
	
<!-- several targets for building product testers for Windows -->
<target name="buildWinProdTester_All" >
	<addTestsToSet dataset="CDSS"/>
	<addTestsToSet dataset="general"/>
	<addTestsToSet dataset="Rivertrak"/>
	<buildProdTesterWindows dataset="CDSS_RioGrande" />
</target>
	
<target name="buildWinProdTester_CDSS" >
	<buildProdTesterWindows dataset="CDSS" />
</target>
	
<target name="buildWinProdTester_General" >
	<buildProdTesterWindows dataset="general" />
</target>
	
<target name="buildWinProdTester_Rivertrak" >
	<buildProdTesterWindows dataset="Rivertrak" />
</target>
	
<target name="buildWinProdTester_CDSS_RioGrande" >
	<buildProdTesterWindows dataset="CDSS_RioGrande" />
</target>
<!--========================================================-->
	
<!-- several targets for building product testers for Linux -->
<target name="buildLinuxProdTester_All" >
	<addTestsToSet dataset="CDSS"/>
	<addTestsToSet dataset="general"/>
	<addTestsToSet dataset="Rivertrak"/>
	<buildProdTesterLinux dataset="CDSS_RioGrande" />	
</target>	
	
<target name="buildLinuxProdTester_CDSS" >
	<buildProdTesterLinux dataset="CDSS" />
</target>
<target name="buildLinuxProdTester_General" >
	<buildProdTesterLinux dataset="general" />
</target>
<target name="buildLinuxProdTester_Rivertrak" >
	<buildProdTesterLinux dataset="Rivertrak" />
</target>
<target name="buildLinuxProdTester_CDSS_RioGrande" >
	<buildProdTesterLinux dataset="CDSS_RioGrande" />
</target>
<!--=======================================================-->
	
<!--===================================================
	Target:   clean
	Function: cleans the build/work and build/test
	          directories to ensure a clean compilation
====================================================-->
<target name="clean" description="removes compiled files">
	
	<!-- delete build stuff -->
	<delete dir="${buildwork.dir}" />
	<delete dir="${build.dir}" />
	<delete dir="tmp" />
	<!--<delete dir="${buildcob.dir)" />-->

	<!-- delete javadoc stuff -->
	<delete dir="${jdoc.dir}" />
		
	<!-- delete the Setup.exe files made from NSIS -->
	<delete file="installer${sep}CDSS${sep}TSTool_*_Setup.exe" />
	
	<delete includeEmptyDirs="true">
		<fileset dir="${dist.dir}" />
		<fileset dir="test${sep}unit${sep}results" />
		<fileset dir="test${sep}operational${sep}results" />
		<fileset dir="test${sep}regression${sep}results" />
		<fileset dir="test${sep}operational${sep}CDSS${sep}logs" />
		<fileset dir="test${sep}operational${sep}Rivertrack${sep}logs" />
		<fileset dir="${CDSS_install.dir}" includes="**/*.exe" />
		<fileset dir="${RTi_install.dir}" includes="**/*.exe" />
	</delete>
	
	<delete dir="test${sep}unit${sep}results${sep}css" />
	<delete dir="test${sep}unit${sep}results${sep}images" />
	<delete dir="test${sep}unit${sep}results${sep}js" />
	<delete dir="test${sep}output" />
	<delete dir="Release" />
	
</target>

<!--===================================================
	Target:   compile
	Function: compiles code for this project and places
			  the compiled code in the build/work dir
====================================================-->
<target name="compile" description="compiles source code to build/work">
	
	<mkdir dir="${buildwork.dir}" />
	
	<javac srcdir 		= "${src.dir}"
           destdir 		= "${buildwork.dir}"
		   classpathref = "classpath"
           debug 		= "on"
	       fork 		= "yes"
	       listfiles 	= "true"
	       deprecation 	= "true"
	       executable 	= "${executable}"
	       compiler 	= "${compiler}"
	/>

</target>


<!--========================================================
	Target: compileTest
	Function: to compile the code under test/src
==========================================================-->
<target name="compileTest" depends="compile"
	description="compiles all test source code into build/test dir">

	<mkdir dir="${build.dir}${sep}test" />
	
	<javac srcdir 		= "${test.dir}"
	       destdir 	    = "${build.dir}${sep}test"
           classpathref = "classpath"
           debug 		= "on"
	       fork 		= "yes"
	       listfiles 	= "true"
	       deprecation 	= "true"
	       executable 	= "${executable}"
	       compiler 	= "${compiler}"
	/>

</target>


<!--=========================================================
	Target: createAllInstallers
	Function: Run NSIS to create CDSS and RiverTrak installers
==========================================================-->
<target name="createAllInstallers" 
	description="creates the NSIS installers for CDSS and RTi">

	<!-- create exe's -->
	<antcall target="createApplicationExe" />
	<!-- create all installers -->
	<antcall target="createInstaller_CDSS" />
	<antcall target="createInstaller_RTi" />
	<antcall target="createInstaller_RTiExtended" />
	
</target>
	
<!--========================================================
   Target: createApplicationExe
   Fuction: create all application executables using NativeJ 
=========================================================-->
<target name="createApplicationExe" depends="jar"
	description="creates executables using NativeJ" >
	
	<delete file="${RTi_install.dir}${sep}TSTool.exe" />
	<delete file="${CDSS_install.dir}${sep}TSTool.exe" />
	
	<!-- create NativeJ EXE file -->
	<exec executable="${nativejc}" 
		dir="${nsis.dir}${sep}CDSS" >
		<arg value="${NJProj}"/>
	</exec>
	
	<!-- create NativeJ EXE file -->
	<exec executable="${nativejc}" 
		dir="${nsis.dir}${sep}Rivertrack" >
		<arg value="${NJProj}"/>
	</exec>
	
</target>	
	
<!--=========================================================
	Target: createInstaller_CDSS
	Function: creates an executable installer for TSTool
==========================================================-->
<target name="createInstaller_CDSS" depends="createApplicationExe" 
	description="runs NSIS to create an executable installer">
	
	<!-- run nsis script to create .exe install -->
		<exec dir="${nsis.dir}${sep}CDSS" 
			executable="S:\DEVELOP\NSIS\makensis.exe" >
			<arg value="TSTool.nsi" />
	</exec>
	
</target>
	
<!--=========================================================
	Target: createInstaller_RTi
	Function: creates an executable installer for TSTool
==========================================================-->
<target name="createInstaller_RTi" depends="createApplicationExe"
	description="runs NSIS to create an executable installer">
	
	<!-- run nsis script to create .exe install -->
		<exec dir="${nsis.dir}${sep}Rivertrack" 
		  executable="S:\DEVELOP\NSIS\makensis.exe" >
			<arg value="TSTool.nsi" />
	</exec>
	
</target>
	

<!--=========================================================
	Target: createInstaller_RTiExtended
	Function: creates an executable installer for TSTool
==========================================================-->
<target name="createInstaller_RTiExtended" depends="createApplicationExe"
	description="runs NSIS to create an executable installer">
	
	<delete file="${RTi_install.dir}${sep}TSTool.exe" />
	
	<!-- create NativeJ EXE file -->
	<exec executable="${nativejc}" 
		dir="${nsis.dir}${sep}Rivertrack" >
		<arg value="TSTool_Extended.njp"/>
	</exec>
	
	<!-- run nsis script to create .exe install -->
		<exec dir="${nsis.dir}${sep}Rivertrack" 
		  executable="S:\DEVELOP\NSIS\makensis.exe" >
			<arg value="TSTool_Extended.nsi" />
	</exec>
	
</target>
		
<!--===========================================================
	Target: createRelease
	Function: create all files and folders needed for a release
			  of TSTool into a folder named Release.
============================================================-->
<target name="createRelease" 
	depends="clean,test,javadoc,createAllInstallers" >

	<!-- make a temp directory (Release) and copy all
	     release specific files and docs here -->
	<mkdir dir="Release" />
	<mkdir dir="Release${sep}javadoc" />
	<mkdir dir="Release${sep}testResults" />
	<mkdir dir="Release${sep}testResults${sep}unit" />
	<mkdir dir="Release${sep}testResults${sep}regression" />
	
	<!-- CDSS -->
	<mkdir dir="Release${sep}TSTool_CDSS" />
	<mkdir dir="Release${sep}TSTool_CDSS${sep}doc" />
	<mkdir dir="Release${sep}TSTool_CDSS${sep}installer" />
	
	<!-- move CDSS files and docs -->
	<move todir="Release${sep}TSTool_CDSS${sep}installer" >
		<fileset dir="${CDSS_install.dir}" includes="**/*Setup.exe" />
	</move>
	<copy todir="Release${sep}TSTool_CDSS${sep}doc" >
		<fileset dir="doc${sep}TSTool${sep}CDSS" />
	</copy>
	
	<!-- RiverTrak -->
	<mkdir dir="Release${sep}TSTool_RiverTrak" />
	<mkdir dir="Release${sep}TSTool_RiverTrak${sep}doc" />
	<mkdir dir="Release${sep}TSTool_RiverTrak${sep}installer" />

	<!-- move RiverTrak files and docs -->
	<move todir="Release${sep}TSTool_RiverTrak${sep}installer" >
		<fileset dir="${RTi_install.dir}" 
		 includes="**/*Setup.exe" excludes="**/TSTool_RiverTrakExtended*" />
	</move>
	<copy todir="Release${sep}TSTool_RiverTrak${sep}doc" >
		<fileset dir="doc${sep}TSTool${sep}Rivertrak" />
	</copy>
	
	<!-- RiverTrak Extended -->
	<mkdir dir="Release${sep}TSTool_RiverTrakExtended" />
	<mkdir dir="Release${sep}TSTool_RiverTrakExtended${sep}doc" />
	<mkdir dir="Release${sep}TSTool_RiverTrakExtended${sep}installer" />

	<!-- move RiverTrak files and docs -->
	<move todir="Release${sep}TSTool_RiverTrakExtended${sep}installer" >
		<fileset dir="${RTi_install.dir}" 
		 includes="**/TSTool_RiverTrakExtended*" />
	</move>
	<copy todir="Release${sep}TSTool_RiverTrakExtended${sep}doc" >
		<fileset dir="doc${sep}TSTool${sep}Rivertrak" />
	</copy>
	
	<!-- move TestResults and Javadocs -->
	<copy todir="Release${sep}testResults${sep}unit" >
		<fileset dir="${unitTest.dir}${sep}results" 
		 includes="*.xml" />
	</copy>
	<copy todir="Release${sep}testResults${sep}regression" >
		<fileset dir="${regTest.dir}${sep}results" 
		 includes="*" />
	</copy>
	
	<copy todir="Release${sep}javadoc">
	   <fileset dir="${jdoc.dir}"/>
	 </copy>
	
</target>
	
	
<!--===================================================
	Target: installerSetup
	Function: copies all installation files and folders
	          to a tmp directory to be packaged.
====================================================-->
<target name="installerSetupLinux" depends="jar" >
	
	<delete dir="tmp" />
	<mkdir dir="${tmp.dir}" />
	<mkdir dir="${tmp.dir}${sep}jre_142" />
	<mkdir dir="${tmp.dir}${sep}logs" />
	<mkdir dir="${tmp.dir}${sep}system" />
	<mkdir dir="${tmp.dir}${sep}bin" />
	
	<!-- copy all files and folders for install package -->
	<copy todir="${tmp.dir}${sep}jre_142" >
		<fileset dir="${ext.dir}${sep}jre_142_linux"
		excludes="**${sep}.svn"/>
	</copy>
	<copy todir="${tmp.dir}${sep}system" >
		<fileset dir="test${sep}operational${sep}CDSS${sep}system" 
			excludes="**${sep}.svn" />
	</copy>
	<copy todir="${tmp.dir}${sep}bin" >
		<fileset dir="${ext.dir}${sep}HydroBaseDMI" includes="**/*.jar" />
		<fileset dir="${ext.dir}${sep}Microsoft_SQL_Server_Java_ODBC_Driver" 
			includes="**/*.jar" />
		<fileset dir="${ext.dir}${sep}NWSRFS_DMI" includes="**/*.jar" />
		<fileset dir="${ext.dir}${sep}RiversideDB_DMI" includes="**/*.jar" />
		<fileset dir="${ext.dir}${sep}RTi_Common" includes="**/*.jar" />
		<fileset dir="${ext.dir}${sep}SatmonSysDMI" includes="**/*.jar" />
		<fileset dir="${ext.dir}${sep}StateCU" includes="**/*.jar" />
		<fileset dir="${ext.dir}${sep}StateMod" includes="**/*.jar" />
		<fileset dir="${ext.dir}${sep}TS_Services" includes="**/*.jar" />
		<fileset dir="${ext.dir}${sep}TSCommandProcessor" 
			includes="**/*.jar" />
		<fileset dir="${ext.dir}" includes="**/Blowfish_142.jar" />
		<fileset dir="${ext.dir}${sep}shellcon" includes="**/shellcon.exe" />
	</copy>
	<copy todir="${tmp.dir}${sep}bin" 
		file="${dist.dir}${sep}${proj_name}_142.jar" />
		
</target>
	
<!--===================================================
	Target:   test
	Function: runs Junit tests and outputs results
====================================================-->
<target name="test" depends="compileTest"
	description="runs Junit test suite">

	<junit printsummary="yes" fork="yes" dir="conf">
		<sysproperty key="net.sourceforge.cobertura.datafile"
				file="${buildcob.dir}${sep}cobertura.ser" />
		<formatter type="xml"/>
		<classpath refid="classpath" />
		<classpath refid="cobertura.classpath" />
		<test name="${testSuite}"
		 outfile="test${sep}unit${sep}results${sep}${proj_name}" />
	</junit>
	
</target>
	
	
<!--===================================================
	Target:   CDSS_runDev
	Function: runs the executable or java class from
			  the build directory for quick development
			  testing using the CDSS operational env.
====================================================-->
<target name="CDSS_runDev" depends="compile"
	description="runs CDSS env. class files">
	
	<!-- need to copy graphics files -->
	<copy todir="${buildwork.dir}${sep}DWR${sep}DMI${sep}tstool" >
		<fileset dir="graphics" />
	</copy>
	
	<java classname="${classname}" fork="true">
		<jvmarg    value = "-mx256m" />
		<jvmarg    value = "-Djava.compiler=NONE" />
		<arg       value = "-home" />
		<arg	   value = "${CDSS_OP.dir}" />
		<classpath refid = "classpath" />   
	</java>	

</target>

<!--===================================================
	Target:   CDSS_runDevD30
	Function: runs the executable or java class from
			  the build directory for quick development
			  testing, at TSTool debug level 30
====================================================-->
<target name="CDSS_runDevD30" depends="compile"
	description="runs CDSS env. with class files and debug=30">

	<java classname="${classname}" fork="true">
		<jvmarg    value = "-mx256m" />
		<jvmarg    value = "-Djava.compiler=NONE" />
		<arg       value = "-home" />
		<arg	   value = "${CDSS_OP.dir}" />
		<arg		value = "-d" />
		<arg		value = ",30" />
		<classpath refid = "classpath" />   
	</java>	

</target>
	
<!--===================================================
	Target:   CDSS_runOp
	Function: runs the executable from the dist jar
			  file for running in the CDSS operational env.
====================================================-->
<target name="CDSS_runOp" depends="jar"
	description="runs CDSS env. with final jar file">
		
	<java classname="${classname}" fork="true">
		<jvmarg    value = "-mx256m" />
		<jvmarg    value = "-Djava.compiler=NONE" />
		<arg       value = "-home" />
		<arg	   value = "${CDSS_OP.dir}" />
		<classpath refid = "classpathOp" />   
	</java>	

</target>
	
<!--===================================================
	Target:   CDSS_runOpD30
	Function: runs the executable from the dist jar
			  for operational testing, at TSTool debug level 30
====================================================-->
<target name="CDSS_runOpD30" depends="jar"
	description="runs CDSS env. with final jar file with debug=30">
	
	<echo message="HOME:   ${testOp.dir}" />
	
	<java classname="${classname}" fork="true">
		<jvmarg    value = "-mx256m" />
		<jvmarg    value = "-Djava.compiler=NONE" />
		<arg       value = "-home" />
		<arg	   value = "${CDSS_OP.dir}" />
		<arg		value = "-d" />
		<arg		value = ",30" />
		<classpath refid = "classpathOp" />   
	</java>	

</target>

<!--===================================================
	Target:   RTi_runDev
	Function: runs the executable or java class from
			  the build directory for quick development
			  testing using the RTi operational env.
====================================================-->
<target name="RTi_runDev" depends="compile"
	description="runs RTi env. using class files">
	
	<!-- need to copy graphics files -->
	<copy todir="${buildwork.dir}${sep}DWR${sep}DMI${sep}tstool" >
		<fileset dir="graphics" />
	</copy>
	
	<java classname="${classname}" fork="true">
		<jvmarg    value = "-mx256m" />
		<jvmarg    value = "-Djava.compiler=NONE" />
		<arg       value = "-home" />
		<arg	   value = "${RTi_OP.dir}" />
		<classpath refid = "classpath" />   
	</java>	
</target>

<!--===================================================
	Target:   RTi_runDevD30
	Function: runs the executable or java class from
			  the build directory for quick development
			  testing using the RTi operational env, at
			  TSTool debug level 30.
====================================================-->
<target name="RTi_runDevD30" depends="compile"
	description="runs RTi env. using class files on debug=30">
	
	<!-- need to copy graphics files -->
	<copy todir="${buildwork.dir}${sep}DWR${sep}DMI${sep}tstool" >
		<fileset dir="graphics" />
	</copy>
	
	<java classname="${classname}" fork="true">
		<jvmarg    value = "-mx256m" />
		<jvmarg    value = "-Djava.compiler=NONE" />
		<arg       value = "-home" />
		<arg	   value = "${RTi_OP.dir}" />
		<arg		value = "-d" />
		<arg		value = ",30" />
		<classpath refid = "classpath" />   
	</java>		

</target>

<!--===================================================
	Target:   RTi_runOp
	Function: runs the executable from the dist jar
			  file for running in the RTi operational env.
====================================================-->
<target name="RTi_runOp" depends="jar"
	description="runs RTi env. with final jar file">
	
	<java classname="${classname}" fork="true">
		<jvmarg    value = "-mx256m" />
		<jvmarg    value = "-Djava.compiler=NONE" />
		<arg       value = "-home" />
		<arg	   value = "${RTi_OP.dir}" />
		<classpath refid = "classpathOp" />   
	</java>	
</target>
	
<!--===================================================
		Target:   RTi_runOpD30
		Function: runs the executable from the dist jar
				  file for running in the RTi operational env.,
			  at TSTool debug level 30
====================================================-->
<target name="RTi_runOpD30" depends="jar"
	description="runs RTi env. with final jar file with debug=30">

<java classname="${classname}" fork="true">
	<jvmarg    value = "-mx256m" />
	<jvmarg    value = "-Djava.compiler=NONE" />
	<arg       value = "-home" />
	<arg	   value = "${RTi_OP.dir}" />
	<arg		value = "-d" />
	<arg		value = ",30" />
	<classpath refid = "classpathOp" />   
</java>	
	
</target>
	
	
<!--===================================================
	Target:   javadoc
	Function: generates the javadocs for this product
====================================================-->
<target name="javadoc" 
	description="creates html javadocs from source code">
	
	<!-- cleanup old javadocs -->
	<delete dir="${jdoc.dir}" />

	<!-- make dir jdocs --> 
	<mkdir dir="${jdoc.dir}" />

	<javadoc destdir="${jdoc.dir}" >
		<classpath refid="classpath"/>
		<fileset dir="${src.dir}${sep}${package}" >
    	  		<include name="*.java"/>
    		</fileset>
	</javadoc>	


</target>


<!--=====================================================
	Target: jar 
=======================================================-->
<target name="jar" depends="compile" 
	description="jars all class files into jar file in dist dir">
    
	<copy todir="${buildwork.dir}${sep}DWR${sep}DMI${sep}tstool" >
		<fileset dir="graphics" />
	</copy>
	
    <jar jarfile="${dist.dir}${sep}${jarfname}" basedir="${buildwork.dir}" >
	<manifest >
    	<attribute name="Author"    value="Riverside Technology, inc. (RTi)"/>
      	<attribute name="Address1"  value="2290 E. Prospect Road, Suite 1"/>
      	<attribute name="Address2"  value="Fort Collins, CO 80525"/>
        <attribute name="Phone"     value="970-484-7573"/>
	<attribute name="Web"       value="http://www.riverside.com"/>
	<attribute name="BuildDate" value="${jarDate}"/>
        <attribute name="Contents"  value="Contains tstool Classes"/>
      </manifest>

    </jar>
	
</target>

<!-- regression tests all data sets using CDSS config -->
<target name="regTestAll_CDSS" >
	<regTestSetup dataset="CDSS_RioGrande" />
	<regTestSetup dataset="general" />
	<regTestSetup dataset="Rivertrak"/>
	<antcall target="regTestCDSS" />
</target>
		
<!-- regression tests all data sets using Rivertrak config -->	
<target name="regTestAll_Rivertrak" >
	<regTestSetup dataset="CDSS_RioGrande" />
	<regTestSetup dataset="general" />
	<regTestSetup dataset="CDSS"/>
	<antcall target="regTestRivertrak" />
</target>
	
<!--=================================================
	Target: regTestCDSS
	Function: to regression test this product.  Runs 
	          TSTool using a commands file and sends
	          the output to the Regression results
	          folder.   
===================================================-->
<target name="regTestCDSS" depends="jar"
	description="runs CDSS regression tests and outputs 
	results to test/regression/results">
	
	<ant antfile="${ext.dir}${sep}RTiBuild${sep}product-tester.xml" 
		target="regTest">
		<property name="reg_dataset" value="CDSS"/>
		<property name="reg_install.dir" 
			value="${CDSS_install.dir}"/>
		<property name="reg_proj_file" value="${NJProj_Reg}"/>
	</ant>
	
</target>
	
<!--=================================================
	Target: regTestGeneral
	Function: to regression test this product.  Runs 
	          TSTool using a commands file and sends
	          the output to the Regression results
	          folder.   
===================================================-->
<target name="regTestGeneral" depends="jar"
	description="runs CDSS regression tests and outputs 
	results to test/regression/results">
	
	<ant antfile="${ext.dir}${sep}RTiBuild${sep}product-tester.xml" 
	 target="regTest">
		<property name="reg_dataset" value="general"/>
		<property name="reg_install.dir" 
			value="${CDSS_install.dir}"/>
		<property name="reg_proj_file" value="${NJProj_Reg}"/>
	</ant>
		
</target>
	
<!--=================================================
	Target: regTestRivertrak
	Function: to regression test this product.  Runs 
	          TSTool using a commands file and sends
	          the output to the Regression results
	          folder.   
===================================================-->
<target name="regTestRivertrak" 
	depends="createApplicationExe"
	description="runs regression tests and outputs results
	to test/regression/results">
	
	<ant antfile="${ext.dir}${sep}RTiBuild${sep}product-tester.xml" 
	 target="regTest">
		<property name="reg_dataset" value="Rivertrak"/>
		<property name="reg_install.dir" 
			value="${RTi_install.dir}"/>
		<property name="reg_proj_file" value="${NJProj_Reg}"/>
	</ant>
	
</target>
	
<!--=================================================
	Target: regTestRivertrakExt
	Function: to regression test this product.  Runs 
	          TSTool using a commands file and sends
	          the output to the Regression results
	          folder.   
===================================================-->
<target name="regTestRivertrakExt" 
	depends="createApplicationExe"
	description="runs regression tests and outputs results
	to test/regression/results">
	
	<ant antfile="${ext.dir}${sep}RTiBuild${sep}product-tester.xml" 
	 target="regTest">
		<property name="reg_dataset" value="Rivertrak"/>
		<property name="reg_install.dir" 
			value="${RTi_install.dir}"/>
		<property name="reg_proj_file" 
			value="${proj_name}_Ext_Regression.njp"/>
	</ant>
	
</target>	
	
<!--========================================================
	Target: costello
	Function: runs the Costello editor for Abbot
=========================================================-->
<target name="costello">

	<java dir="." classname="${costello}" fork="true" >
		<jvmarg value="-Djava.compiler=NONE" />
		<classpath refid="classpath" />
	</java>

</target>

<!--========================================================
	Target: testGui
	Function: runs Abbot script files using Junit framework
=========================================================-->
<target name="testGUI" depends="compile">

	<!-- compile Abbot Test Suite src  -->
	<javac srcdir="${regTest.dir}${sep}src" destdir="${buildwork.dir}" 
		classpathref="classpath" fork="yes" listfiles="true"
		executable="${executable}" compiler="${compiler}" />
	
	<junit printsummary="yes" dir="." fork="yes" haltonfailure="yes">
		<formatter type="xml"/>	
		<classpath refid="classpath" />
		<test name="${AbbotSuite}" 
		  outfile="test${sep}regression${sep}results${sep}AbbotResults" />
	</junit>
		
	<!-- old way of running with perl script
	<exec dir="${regTest.dir}${sep}scripts" executable="perl" >
		<arg value="runTests.pl" />
	</exec>
	-->

</target>
	
<target name="cobertura_init" depends="compileTest" >

	<delete file="${buildcob.dir}${sep}cobertura.ser" />

	<cobertura-instrument todir="${buildcob.dir}" 
		datafile="${buildcob.dir}${sep}cobertura.ser">
	    <fileset dir="${buildwork.dir}" >
	    	<include name="**/*.class" />
	    	<exclude name="**/*Test*.class" />
	    </fileset>
	</cobertura-instrument>
	
</target>
	
<target name="cobertura" depends="cobertura_init,test" >
	
	<cobertura-report format="html" destdir="test${sep}unit${sep}results"
		datafile="${buildcob.dir}${sep}cobertura.ser" >
	    <fileset dir="${src.dir}">
	        <include name="**/*.java" />
	        <exclude name="**/*Test*.java" />
	    </fileset>
	</cobertura-report>
	
</target>
	

<!--===================================================
	Target:   help
	Function: prints out info on targets and properties
====================================================-->
<target name="help">

	<echo>
		
TARGET         FUNCTION
===========================================================
buildProductTestSetWindows     zips product test set to dist folder

buildProductTestSetLinux     gzips product test set to dist folder
		
compile        compiles source code

compileTest    compiles the test source code

test           runs the unit tests for this product

clean          removes the build directories

CDSS_runDev    runs the application using class files using CDSS env.
		
RTi_runDev     runs the application using class files using RTi env.
		
CDSS_runOp     runs the application from the dist jar file using CDSS env.

RTi_runOp      runs the application from the dist jar file using RTi env.

javadoc        generates javadocs from source code

jar            copies class files into a single jar file in dist    
		
createInstaller        creates an executable installer in the installer dir

regTest        runs a regression test and stores results in regression/results dir
	
help           shows the help for this build file
===========================================================
	
	</echo>

</target>


</project>


