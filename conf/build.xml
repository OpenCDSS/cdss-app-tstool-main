<!-- TSTool build file 
	Author  :  Kurt Tometich
	Date    :  10/30/2006
	Targets :
	 			clean
	 			compile
				compileTest
				test
	 			runDev
	 			runOp
	 			regTest
	 			install
	 			javadoc
				jar
	 			help
	 			
-->

<project name="buildTemplate" basedir="../" default="compile">

	<!-- === Set file separator depending on OS ===-->
	<condition property="sep" value="/">
	<and>
       		<os family="unix" />
	</and>
	</condition>
	<condition property="sep" value="\">
	<and>
       		<os family="windows" />
	</and>
	</condition>

	<!-- set the javac location for OS type -->
	<condition property="executable" value="/home/sharedLibs/j2sdk1.4.2_12/bin/javac">
		<and>
	       		<os family="unix" />
		</and>
	</condition>
	<condition property="executable" value="I:\develop\jdk_142\bin\javac">
		<and>
	       		<os family="windows" />
		</and>
	</condition>
		
	<!-- set the jhome variable depending on OS type -->
	<condition property="jhome" value="/home/sharedLibs/j2sdk1.4.2_12">
		<and>
		      <os family="unix" />
		</and>
	</condition>
	<condition property="jhome" value="I:\develop\jdk_142">
		<and>
		      <os family="windows" />
		</and>
	</condition>

	
	<!--============= General Properties =============-->
	<property name="src.dir"	     location="src"         />
	<property name="build.dir"	     location="build"       />
	<property name="dist.dir"        location="dist" />
	<property name="doc.dir"		 location="doc" />
	<property name="buildwork.dir"   location="build${sep}work"   />
	<property name="buildtest.dir"   location="build${sep}test"      />
	<property name="test.dir"	     location="test${sep}unit${sep}src"        />
	<property name="testOp.dir"      location="test${sep}operational" />
	<property name="jdoc.dir"	     location="doc${sep}javadoc" />
	<property name="ext.dir"         location="externals"       />
	<property name="graphics.dir"    location="graphics"        />
	<property name="system.dir"  	 location="test${sep}system"        />
	<property name="logs.dir"    	 location="test${sep}logs"        />
	<property name="package"     	 value="DWR${sep}DMI${sep}tstool" />
	<property name="nsis.dir"		 location="NSIS" />
	<property name="executable"  	 location="I:${sep}develop${sep}jdk_150${sep}bin${sep}javac" />
	<property name="classname"   	 value="DWR.DMI.tstool.tstool" />
	<property name="testSuite"  	 value="DWR.DMI.tstool.tstoolTestSuite" />
	<property name="jarfname"    	 value="TSTool_142.jar" />
	<property name="regTest.dir"	 location="test${sep}regression${sep}src" />
	<property name="command_file"    value="Regression.TSTool" />
	<property name="proj_name"		 value="TSTool" />
	
	<!--================ Dependencies ==================-->
	<property name="d1"	 
		value="${ext.dir}${sep}HydroBaseDMI${sep}HydroBaseDMI_142.jar" />
	<property name="d2"	 
		value="${ext.dir}${sep}mssql${sep}msbase.jar" />
	<property name="d3"  
		value="${ext.dir}${sep}mssql${sep}mssqlserver.jar" />
	<property name="d4"	 
		value="${ext.dir}${sep}mssql${sep}msutil.jar" />
	<property name="d5"	 
		value="${ext.dir}${sep}NWSRFS_DMI${sep}NWSRFS_DMI_142.jar" />
	<property name="d6"	 
		value="${ext.dir}${sep}RiversideDB_DMI${sep}RiversideDB_DMI_142.jar" />
	<property name="d7"	 
		value="${ext.dir}${sep}RTi_Common${sep}RTi_Common_142.jar" />
	<property name="d8"	 
		value="${ext.dir}${sep}StateCU${sep}StateCU_142.jar" />
	<property name="d9"	 
		value="${ext.dir}${sep}StateMod${sep}StateMod_142.jar" />
	<property name="d10"
		value="${ext.dir}${sep}TS_Services${sep}TS_Services.jar" />
	<property name="d11"	 
			value="${ext.dir}${sep}SatmonSysDMI${sep}SatmonSysDMI_142.jar" />
	<property name="junit"
		value="${ext.dir}${sep}junit.jar" />
	<property name="blowfish"
		value="${ext.dir}${sep}Blowfish_142.jar" />
	
	<!-- =========== Compiler Properties ===============-->
	<property name="compiler" value="modern" />
	

	<!-- set classpath -->
	<path id="classpath">
		<pathelement location="${junit}" />
		<pathelement location="${d1}"/>
		<pathelement location="${d2}"/>
		<pathelement location="${d3}"/>
		<pathelement location="${d4}"/>
		<pathelement location="${d5}"/>
		<pathelement location="${d6}"/>
		<pathelement location="${d7}"/>
		<pathelement location="${d8}"/>
		<pathelement location="${d9}"/>
		<pathelement location="${d10}"/>
		<pathelement location="${d11}"/>
		<pathelement location="${buildwork.dir}"/>
		<pathelement location="${buildtest.dir}" />
		<pathelement location="${blowfish}" />
		<pathelement location="${dist.dir}${sep}${jarfname}" />
		<pathelement location="."/>
	</path>
	
	<path id="classpathOp">
			<pathelement location="${d1}"/>
			<pathelement location="${d2}"/>
			<pathelement location="${d3}"/>
			<pathelement location="${d4}"/>
			<pathelement location="${d5}"/>
			<pathelement location="${d6}"/>
			<pathelement location="${d7}"/>
			<pathelement location="${d8}"/>
			<pathelement location="${d9}"/>
			<pathelement location="${d10}"/>
			<pathelement location="${d11}"/>
			<pathelement location="${blowfish}" />
			<pathelement location="${dist.dir}${sep}${jarfname}" />
			<pathelement location="."/>
	</path>
	
	<!-- current timestamp -->
	<tstamp>
	  <format property="TODAY" pattern="MM/dd/yyyy hh:mm" locale="en"/> 	
  	  <format property="jarDate" pattern="yyyy-MM-dd hh:mm" locale="en" />
	</tstamp>
	
	

<!--===================================================
	Target:   clean
	Function: cleans the build/work and build/test
	          directories to ensure a clean compilation
====================================================-->
<target name="clean" description="remove compiled files">
	
	<!-- delete build stuff -->
	<delete dir="${buildwork.dir}" />
	<delete dir="${build.dir}" />

	<!-- delete javadoc stuff -->
	<delete dir="${jdoc.dir}" />
	
	<!-- delete runtime directories -->
	<delete dir="${system.dir}" />
	<delete dir="${logs.dir}" />
	
	<delete>
		<fileset dir="test${sep}unit${sep}results" includes="**/*.xml"/>
	</delete>
	
</target>

<!--===================================================
	Target:   compile
	Function: compiles code for this project and places
			  the compiled code in the build/work dir
====================================================-->
<target name="compile" >
	
	<mkdir dir="${buildwork.dir}" />
	
	<javac srcdir 		= "${src.dir}${sep}${package}"
           destdir 		= "${buildwork.dir}"
		   classpathref = "classpath"
           debug 		= "on"
	       fork 		= "yes"
	       listfiles 	= "true"
	       deprecation 	= "true"
	       executable 	= "${executable}"
	       compiler 	= "${compiler}"
	/>

</target>


<!--========================================================
	Target: compileTest
	Function: to compile the code under test/src
==========================================================-->
<target name="compileTest" depends="compile">

	<mkdir dir="${build.dir}${sep}test" />
	
	<javac srcdir 		= "${test.dir}${sep}${package}"
	       destdir 	    = "${build.dir}${sep}test"
           classpathref = "classpath"
           debug 		= "on"
	       fork 		= "yes"
	       listfiles 	= "true"
	       deprecation 	= "true"
	       executable 	= "${executable}"
	       compiler 	= "${compiler}"
	/>

</target>

	
<!--===================================================
	Target:   test
	Function: runs Junit tests and outputs results
====================================================-->
<target name="test" depends="compileTest">

	<junit printsummary="yes" fork="yes" dir="conf">
		<formatter type="xml"/>
		<classpath refid="classpath" />
		<test name="${testSuite}"
		 outfile="test${sep}unit${sep}results${sep}${proj_name}" />
	</junit>
	
</target>
	
	
<!--===================================================
	Target:   runDev
	Function: runs the executable or java class from
			  the build directory for quick development
			  testing
====================================================-->
<target name="runDev" depends="compile">
	
	<echo message="HOME:   ${testOp.dir}" />
	
	<java classname="${classname}" fork="true">
		<jvmarg    value = "-mx256m" />
		<jvmarg    value = "-Djava.compiler=NONE" />
		<arg       value = "-home" />
		<arg	   value = "${testOp.dir}" />
		<classpath refid = "classpath" />   
	</java>	

</target>


<!--===================================================
	Target:   runOp
	Function: runs the executable from the dist jar
			  for operational testing
====================================================-->
	<target name="runOp" depends="jar">
		
		<echo message="HOME:   ${testOp.dir}" />
		
		<java classname="${classname}" fork="true">
			<jvmarg    value = "-mx256m" />
			<jvmarg    value = "-Djava.compiler=NONE" />
			<arg       value = "-home" />
			<arg	   value = "${testOp.dir}" />
			<classpath refid = "classpathOp" />   
		</java>	

	</target>
	
	
<!--===================================================
	Target:   javadoc
	Function: generates the javadocs for this product
====================================================-->
<target name="javadoc">

	<echo>
********** Creating Javadocs **************
   Destination:     ${jdoc.dir}
   From Dir   :     ${src.dir}${sep}${package} 
*******************************************
	</echo>
	
	<!-- cleanup old javadocs -->
	<delete dir="${jdoc.dir}" />

	<!-- make dir jdocs --> 
	<mkdir dir="${jdoc.dir}" />

	<javadoc destdir="${jdoc.dir}" >
		<classpath refid="classpath"/>
		<fileset dir="${src.dir}${sep}${package}" >
    	  		<include name="*.java"/>
    		</fileset>
	</javadoc>	


</target>


<!--=====================================================
	Target: jar 
=======================================================-->
<target name="jar" depends="compile" >
    
	<echo>
********** Creating jar file *****************
   Destination:    ${dist.dir}
   source dir :    ${buildwork.dir}
   jar filename:   ${jarfname}
**********************************************
	</echo>

	<!-- copy docs folder into build for the jar 
	<copy todir="${buildwork.dir}">
	<fileset dir=".">
	<include name="doc${sep}**${sep}*" />
	<include name="graphics${sep}**${sep}*" />
	</fileset>
	</copy>
	-->
	
	<copy todir="${buildwork.dir}${sep}DWR{sep}DMI{sep}tstool" >
		<fileset dir="graphics" />
	</copy>
	
    <mkdir dir="${dist.dir}"/>
    <jar jarfile="${dist.dir}${sep}${jarfname}" basedir="${buildwork.dir}" >
	<manifest >
    	<attribute name="Author"    value="Riverside Technology, inc. (RTi)"/>
      	<attribute name="Address1"  value="2290 E. Prospect Road, Suite 1"/>
      	<attribute name="Address2"  value="Fort Collins, CO 80525"/>
        <attribute name="Phone"     value="970-484-7573"/>
	<attribute name="Web"       value="http://www.riverside.com"/>
	<attribute name="BuildDate" value="${jarDate}"/>
        <attribute name="Contents"  value="Contains tstool Classes"/>
      </manifest>

    </jar>

</target>

<!--=================================================
	Target: regTest
	Function: to regression test this product.  Runs 
	          TSTool using a commands file and sends
	          the output to the Regression results
	          folder.  Next, a Perl script is run to
	          parse the output from TSTool and generate
	          readable results.  If a test fails then 
	          a developer should check out the log file
	          under Regression results for more info. 
===================================================-->
<target name="regTest" depends="test" >
	
	<java classname="${classname}" fork="true" >
		<jvmarg    value = "-mx256m" />
		<jvmarg    value = "-Djava.compiler=NONE" />
		<arg       value = "-home" />
		<arg	   value = "${testOp.dir}" />
		<arg	   value = "-commands" />
		<arg	   value = "${regTest.dir}${sep}${command_file}" />
		<classpath refid = "classpathOp" />   
	</java>	
	
	<!-- run perl script to parse output and display results -->
	<exec dir="${regTest.dir}" executable="perl" >
		<arg value="parseOutput.pl" />
	</exec>
	
</target>

	
<target name="nsis" depends="jar" >
	
	<!-- run nsis script to create .exe install -->
		<exec dir="${nsis.dir}" executable="I:\DEVELOP\NSIS\makensis.exe" >
			<arg value="TSTool.nsi" />
	</exec>
	
</target>


<!--===================================================
	Target:   help
	Function: prints out info on targets and properties
====================================================-->
<target name="help">

	<echo>
		
TARGET         FUNCTION
===========================================================
compile        compiles source code

compileTest    compiles the test source code

test           runs the junit tests for this product

clean          removes the build directories

runDev         runs the application using class files
		
runOp          runs the application from the dist jar file

javadoc        generates javadocs from source code

jar            copies class files into a single jar file in dist    
		
nsis           creates an executable installer in the nsis dir

regTest        runs a regression test and stores results in regression/results dir
	
help           shows the help for this build file
===========================================================
	
	</echo>

</target>


</project>


