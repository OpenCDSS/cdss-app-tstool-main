<!-- TSTool build file 
	Author  :  Kurt Tometich
	Date    :  10/30/2006
	Targets :
	 			clean
	 			compile
				compileTest
				test
	 			CDSS_runDev
	 			CDSS_runDevD30
	 			RTi_runDev
	 			RTi_runDevD30
	 			CDSS_runOp
	 			CDSS_runOpD30
	 			RTi_runOp
	 			RTi_runOpD30
	 			regTest
	 			install
	 			javadoc
				jar
	 			help
	 			
-->

<project name="buildTemplate" basedir="../" default="compile">

	<!-- === Set file separator depending on OS ===-->
	<condition property="sep" value="/">
	<and>
       		<os family="unix" />
	</and>
	</condition>
	<condition property="sep" value="\">
	<and>
       		<os family="windows" />
	</and>
	</condition>

	<!-- set the javac location for OS type -->
	<condition property="executable" value="/home/sharedLibs/j2sdk1.4.2_12/bin/javac">
		<and>
	       		<os family="unix" />
		</and>
	</condition>
	<condition property="executable" value="I:\develop\jdk_142\bin\javac">
		<and>
	       		<os family="windows" />
		</and>
	</condition>
		
	<!-- set the jhome variable depending on OS type -->
	<condition property="jhome" value="/home/sharedLibs/j2sdk1.4.2_12">
		<and>
		      <os family="unix" />
		</and>
	</condition>
	<condition property="jhome" value="I:\develop\jdk_142">
		<and>
		      <os family="windows" />
		</and>
	</condition>

	
	<!--============= General Properties =============-->
	<property name="src.dir"	     location="src"         />
	<property name="build.dir"	     location="build"       />
	<property name="dist.dir"        location="dist" />
	<property name="doc.dir"		 location="doc" />
	<property name="buildwork.dir"   location="build${sep}work"   />
	<property name="buildtest.dir"   location="build${sep}test"      />
	<property name="test.dir"	     location="test${sep}unit${sep}src"        />
	<property name="CDSS_OP.dir"     location="test${sep}operational${sep}CDSS" />
	<property name="RTi_OP.dir"      location="test${sep}operational${sep}RTi" />
	<property name="jdoc.dir"	     location="doc${sep}javadoc" />
	<property name="ext.dir"         location="externals"       />
	<property name="graphics.dir"    location="graphics"        />
	<property name="system.dir"  	 location="test${sep}system"        />
	<property name="logs.dir"    	 location="test${sep}logs"        />
	<property name="package"     	 value="DWR${sep}DMI${sep}tstool" />
	<property name="nsis.dir"		 location="installer" />
	<property name="executable"  	 location="I:${sep}develop${sep}jdk_150${sep}bin${sep}javac" />
	<property name="classname"   	 value="DWR.DMI.tstool.tstool" />
	<property name="testSuite"  	 value="DWR.DMI.tstool.tstoolTestSuite" />
	<property name="jarfname"    	 value="TSTool_142.jar" />
	<property name="regTest.dir"	 location="test${sep}regression" />
	<property name="command_file"    value="Regression.TSTool" />
	<property name="proj_name"		 value="TSTool" />
	<property name="costello" value="abbot.editor.Costello" />
	
	<!--================ Dependencies ==================-->
	<property name="hydro"	 
		value="${ext.dir}${sep}HydroBaseDMI${sep}HydroBaseDMI_142.jar" />
	<property name="msbase"	 
		value="${ext.dir}${sep}Microsoft_SQL_Server_Java_ODBC_Driver${sep}msbase.jar" />
	<property name="mssqlserver"	 
			value="${ext.dir}${sep}Microsoft_SQL_Server_Java_ODBC_Driver${sep}mssqlserver.jar" />
	<property name="msutil"	 
			value="${ext.dir}${sep}Microsoft_SQL_Server_Java_ODBC_Driver${sep}msutil.jar" />
	<property name="NWSRFS_DMI"	 
		value="${ext.dir}${sep}NWSRFS_DMI${sep}NWSRFS_DMI_142.jar" />
	<property name="RiversideDB"	 
		value="${ext.dir}${sep}RiversideDB_DMI${sep}RiversideDB_DMI_142.jar" />
	<property name="RTi_Common"	 
		value="${ext.dir}${sep}RTi_Common${sep}RTi_Common_142.jar" />
	<property name="StateCU"	 
		value="${ext.dir}${sep}StateCU${sep}StateCU_142.jar" />
	<property name="StateMod"	 
		value="${ext.dir}${sep}StateMod${sep}StateMod_142.jar" />
	<property name="TS_Services"
		value="${ext.dir}${sep}TS_Services${sep}TS_Services.jar" />
	<property name="Satmon"	 
			value="${ext.dir}${sep}SatmonSysDMI${sep}SatmonSysDMI_142.jar" />
	<property name="junit"
		value="${ext.dir}${sep}junit.jar" />
	<property name="blowfish"
		value="${ext.dir}${sep}Blowfish_142.jar" />
	
	<!-- Abbot jar files -->
	<property name="Abbot.jar" 
		value="externals${sep}Abbot${sep}abbot.jar" />
	<property name="jdom.jar" 
		value="externals${sep}Abbot${sep}jdom.jar" />
	<property name="xerces.jar" 
		value="externals${sep}Abbot${sep}xerces.jar" />
	<property name="xml-apis.jar" 
			value="externals${sep}Abbot${sep}xml-apis.jar" />
	<property name="jgraph.jar" 
		value="externals${sep}Abbot${sep}jgraph.jar" />
	<property name="bsh.jar" 
		value="externals${sep}Abbot${sep}bsh.jar" />
	<property name="MRJ.zip" 
			value="externals${sep}Abbot${sep}MRJToolkitStubs.zip" />
	<property name="gnu-regexp.jar" 
				value="externals${sep}Abbot${sep}gnu-regexp.jar" />
	<property name="ant4eclipse.jar" 
		value="externals${sep}Abbot${sep}ant4eclipse.jar" />
	
	<!-- =========== Compiler Properties ===============-->
	<property name="compiler" value="modern" />
	

	<!-- set classpath -->
	<path id="classpath">
		<pathelement location="${junit}" />
		<pathelement location="${buildwork.dir}"/>
		<pathelement location="${buildtest.dir}" />
		<pathelement location="${hydro}"/>
		<pathelement location="${msbase}"/>
		<pathelement location="${mssqlserver}"/>
		<pathelement location="${msutil}"/>
		<pathelement location="${NWSRFS_DMI}"/>
		<pathelement location="${RiversideDB}"/>
		<pathelement location="${RTi_Common}"/>
		<pathelement location="${StateCU}"/>
		<pathelement location="${StateMod}"/>
		<pathelement location="${TS_Services}"/>
		<pathelement location="${Satmon}"/>
		<pathelement location="${Abbot.jar}" />
		<pathelement location="${buildtest.dir}" />
		<pathelement location="${jdom.jar}" />
		<pathelement location="${xerces.jar}" />
		<pathelement location="${xml-apis.jar}" />
		<pathelement location="${bsh.jar}" />
		<pathelement location="${jgraph.jar}" />
		<pathelement location="${MRJ.zip}" />
		<pathelement location="${gnu-regexp.jar}" />
		<pathelement location="${ant4eclipse.jar}" />
		<pathelement location="${blowfish}" />
		<pathelement location="."/>
	</path>
	
	<path id="classpathOp">
		<pathelement location="${hydro}"/>
		<pathelement location="${msbase}"/>
		<pathelement location="${mssqlserver}"/>
		<pathelement location="${msutil}"/>
		<pathelement location="${NWSRFS_DMI}"/>
		<pathelement location="${RiversideDB}"/>
		<pathelement location="${RTi_Common}"/>
		<pathelement location="${StateCU}"/>
		<pathelement location="${StateMod}"/>
		<pathelement location="${TS_Services}"/>
		<pathelement location="${Satmon}"/>
		<pathelement location="${blowfish}" />
		<pathelement location="${junit}" />
		<pathelement location="${Abbot.jar}" />
		<pathelement location="${buildtest.dir}" />
		<pathelement location="${jdom.jar}" />
		<pathelement location="${xerces.jar}" />
		<pathelement location="${xml-apis.jar}" />
		<pathelement location="${bsh.jar}" />
		<pathelement location="${jgraph.jar}" />
		<pathelement location="${MRJ.zip}" />
		<pathelement location="${gnu-regexp.jar}" />
		<pathelement location="${ant4eclipse.jar}" />
		<pathelement location="${dist.dir}${sep}${jarfname}" />
		<pathelement location="."/>
	</path>
	
	<!-- current timestamp -->
	<tstamp>
	  <format property="TODAY" pattern="MM/dd/yyyy hh:mm" locale="en"/> 	
  	  <format property="jarDate" pattern="yyyy-MM-dd hh:mm" locale="en" />
	</tstamp>
	

<!--===================================================
	Target:   clean
	Function: cleans the build/work and build/test
	          directories to ensure a clean compilation
====================================================-->
<target name="clean" description="removes compiled files">
	
	<!-- delete build stuff -->
	<delete dir="${buildwork.dir}" />
	<delete dir="${build.dir}" />

	<!-- delete javadoc stuff -->
	<delete dir="${jdoc.dir}" />
		
	<!-- delete the Setup.exe files made from NSIS -->
	<delete file="installer${sep}CDSS${sep}TSTool_Setup.exe" />
	
	<delete>
		<fileset dir="test${sep}unit${sep}results" includes="**/*.xml"/>
		<fileset dir="test${sep}operational${sep}results" />
		<fileset dir="test${sep}regression${sep}results" />
		<fileset dir="test${sep}operational${sep}CDSS${sep}logs" />
		<fileset dir="test${sep}operational${sep}RTi${sep}logs" />
		<fileset dir= "test${sep}regression${sep}src${sep}commands" 
		         includes="**/*Output*.dv" />
	</delete>
	
</target>

<!--===================================================
	Target:   compile
	Function: compiles code for this project and places
			  the compiled code in the build/work dir
====================================================-->
<target name="compile" description="compiles source code to build/work">
	
	<mkdir dir="${buildwork.dir}" />
	
	<javac srcdir 		= "${src.dir}${sep}${package}"
           destdir 		= "${buildwork.dir}"
		   classpathref = "classpath"
           debug 		= "on"
	       fork 		= "yes"
	       listfiles 	= "true"
	       deprecation 	= "true"
	       executable 	= "${executable}"
	       compiler 	= "${compiler}"
	/>

</target>


<!--========================================================
	Target: compileTest
	Function: to compile the code under test/src
==========================================================-->
<target name="compileTest" depends="compile"
	description="compiles all test source code into build/test dir">

	<mkdir dir="${build.dir}${sep}test" />
	
	<javac srcdir 		= "${test.dir}${sep}${package}"
	       destdir 	    = "${build.dir}${sep}test"
           classpathref = "classpath"
           debug 		= "on"
	       fork 		= "yes"
	       listfiles 	= "true"
	       deprecation 	= "true"
	       executable 	= "${executable}"
	       compiler 	= "${compiler}"
	/>

</target>

	
<!--===================================================
	Target:   test
	Function: runs Junit tests and outputs results
====================================================-->
<target name="test" depends="compileTest"
	description="runs Junit test suite">

	<junit printsummary="yes" fork="yes" dir="conf">
		<formatter type="xml"/>
		<classpath refid="classpath" />
		<test name="${testSuite}"
		 outfile="test${sep}unit${sep}results${sep}${proj_name}" />
	</junit>
	
</target>
	
	
<!--===================================================
	Target:   CDSS_runDev
	Function: runs the executable or java class from
			  the build directory for quick development
			  testing using the CDSS operational env.
====================================================-->
<target name="CDSS_runDev" depends="compile"
	description="runs CDSS env. class files">
	
	<!-- need to copy graphics files -->
	<copy todir="${buildwork.dir}${sep}DWR${sep}DMI${sep}tstool" >
		<fileset dir="graphics" />
	</copy>
	
	<java classname="${classname}" fork="true">
		<jvmarg    value = "-mx256m" />
		<jvmarg    value = "-Djava.compiler=NONE" />
		<arg       value = "-home" />
		<arg	   value = "${CDSS_OP.dir}" />
		<classpath refid = "classpath" />   
	</java>	

</target>

<!--===================================================
	Target:   CDSS_runDevD30
	Function: runs the executable or java class from
			  the build directory for quick development
			  testing, at TSTool debug level 30
====================================================-->
<target name="CDSS_runDevD30" depends="compile"
	description="runs CDSS env. with class files and debug=30">

	<java classname="${classname}" fork="true">
		<jvmarg    value = "-mx256m" />
		<jvmarg    value = "-Djava.compiler=NONE" />
		<arg       value = "-home" />
		<arg	   value = "${CDSS_OP.dir}" />
		<arg		value = "-d" />
		<arg		value = ",30" />
		<classpath refid = "classpath" />   
	</java>	

</target>
	
<!--===================================================
	Target:   CDSS_runOp
	Function: runs the executable from the dist jar
			  file for running in the CDSS operational env.
====================================================-->
<target name="CDSS_runOp" depends="jar"
	description="runs CDSS env. with final jar file">
		
	<java classname="${classname}" fork="true">
		<jvmarg    value = "-mx256m" />
		<jvmarg    value = "-Djava.compiler=NONE" />
		<arg       value = "-home" />
		<arg	   value = "${CDSS_OP.dir}" />
		<classpath refid = "classpathOp" />   
	</java>	

</target>
	
<!--===================================================
	Target:   CDSS_runOpD30
	Function: runs the executable from the dist jar
			  for operational testing, at TSTool debug level 30
====================================================-->
<target name="CDSS_runOpD30" depends="jar"
	description="runs CDSS env. with final jar file with debug=30">
	
	<echo message="HOME:   ${testOp.dir}" />
	
	<java classname="${classname}" fork="true">
		<jvmarg    value = "-mx256m" />
		<jvmarg    value = "-Djava.compiler=NONE" />
		<arg       value = "-home" />
		<arg	   value = "${CDSS_OP.dir}" />
		<arg		value = "-d" />
		<arg		value = ",30" />
		<classpath refid = "classpathOp" />   
	</java>	

</target>

<!--===================================================
	Target:   RTi_runDev
	Function: runs the executable or java class from
			  the build directory for quick development
			  testing using the RTi operational env.
====================================================-->
<target name="RTi_runDev" depends="compile"
	description="runs RTi env. using class files">
	
	<!-- need to copy graphics files -->
	<copy todir="${buildwork.dir}${sep}DWR${sep}DMI${sep}tstool" >
		<fileset dir="graphics" />
	</copy>
	
	<java classname="${classname}" fork="true">
		<jvmarg    value = "-mx256m" />
		<jvmarg    value = "-Djava.compiler=NONE" />
		<arg       value = "-home" />
		<arg	   value = "${RTi_OP.dir}" />
		<classpath refid = "classpath" />   
	</java>	
</target>

<!--===================================================
	Target:   RTi_runDevD30
	Function: runs the executable or java class from
			  the build directory for quick development
			  testing using the RTi operational env, at
			  TSTool debug level 30.
====================================================-->
<target name="RTi_runDevD30" depends="compile"
	description="runs RTi env. using class files on debug=30">
	
	<!-- need to copy graphics files -->
	<copy todir="${buildwork.dir}${sep}DWR${sep}DMI${sep}tstool" >
		<fileset dir="graphics" />
	</copy>
	
	<java classname="${classname}" fork="true">
		<jvmarg    value = "-mx256m" />
		<jvmarg    value = "-Djava.compiler=NONE" />
		<arg       value = "-home" />
		<arg	   value = "${RTi_OP.dir}" />
		<arg		value = "-d" />
		<arg		value = ",30" />
		<classpath refid = "classpath" />   
	</java>		

</target>

<!--===================================================
	Target:   RTi_runOp
	Function: runs the executable from the dist jar
			  file for running in the RTi operational env.
====================================================-->
<target name="RTi_runOp" depends="jar"
	description="runs RTi env. with final jar file">
	
	<java classname="${classname}" fork="true">
		<jvmarg    value = "-mx256m" />
		<jvmarg    value = "-Djava.compiler=NONE" />
		<arg       value = "-home" />
		<arg	   value = "${RTi_OP.dir}" />
		<classpath refid = "classpathOp" />   
	</java>	
</target>
	
<!--===================================================
		Target:   RTi_runOpD30
		Function: runs the executable from the dist jar
				  file for running in the RTi operational env.,
			  at TSTool debug level 30
====================================================-->
<target name="RTi_runOpD30" depends="jar"
	description="runs RTi env. with final jar file with debug=30">

<java classname="${classname}" fork="true">
	<jvmarg    value = "-mx256m" />
	<jvmarg    value = "-Djava.compiler=NONE" />
	<arg       value = "-home" />
	<arg	   value = "${RTi_OP.dir}" />
	<arg		value = "-d" />
	<arg		value = ",30" />
	<classpath refid = "classpathOp" />   
</java>	
	
</target>
	
	
<!--===================================================
	Target:   javadoc
	Function: generates the javadocs for this product
====================================================-->
<target name="javadoc" 
	description="creates html javadocs from source code">
	
	<!-- cleanup old javadocs -->
	<delete dir="${jdoc.dir}" />

	<!-- make dir jdocs --> 
	<mkdir dir="${jdoc.dir}" />

	<javadoc destdir="${jdoc.dir}" >
		<classpath refid="classpath"/>
		<fileset dir="${src.dir}${sep}${package}" >
    	  		<include name="*.java"/>
    		</fileset>
	</javadoc>	


</target>


<!--=====================================================
	Target: jar 
=======================================================-->
<target name="jar" depends="compile" 
	description="jars all class files into jar file in dist dir">
    
	<!-- copy docs folder into build for the jar 
	<copy todir="${buildwork.dir}">
	<fileset dir=".">
	<include name="doc${sep}**${sep}*" />
	<include name="graphics${sep}**${sep}*" />
	</fileset>
	</copy>
	-->
	
	<copy todir="${buildwork.dir}${sep}DWR${sep}DMI${sep}tstool" >
		<fileset dir="graphics" />
	</copy>
	
    <jar jarfile="${dist.dir}${sep}${jarfname}" basedir="${buildwork.dir}" >
	<manifest >
    	<attribute name="Author"    value="Riverside Technology, inc. (RTi)"/>
      	<attribute name="Address1"  value="2290 E. Prospect Road, Suite 1"/>
      	<attribute name="Address2"  value="Fort Collins, CO 80525"/>
        <attribute name="Phone"     value="970-484-7573"/>
	<attribute name="Web"       value="http://www.riverside.com"/>
	<attribute name="BuildDate" value="${jarDate}"/>
        <attribute name="Contents"  value="Contains tstool Classes"/>
      </manifest>

    </jar>
	
</target>
	
	
<!--=================================================
	Target: regTest
	Function: to regression test this product.  Runs 
	          TSTool using a commands file and sends
	          the output to the Regression results
	          folder.  Next, a Perl script is run to
	          parse the output from TSTool and generate
	          readable results.  If a test fails then 
	          a developer should check out the log file
	          under Regression results for more info. 
===================================================-->
<target name="regTest" depends="test"
	description="runs regression tests and outputs results to test/regression/results">
	
	<java classname="${classname}" fork="true" >
		<jvmarg    value = "-mx256m" />
		<jvmarg    value = "-Djava.compiler=NONE" />
		<arg       value = "-home" />
		<arg	   value = "${CDSS_OP.dir}" />
		<arg	   value = "-commands" />
		<arg	   value = "${regTest.dir}${sep}src${sep}${command_file}" />
		<classpath refid = "classpathOp" />   
	</java>	
	
	<!-- run perl script to parse output and display results -->
	<exec dir="${regTest.dir}${sep}src" executable="perl" >
		<arg value="parseOutput.pl" />
	</exec>
	
</target>


<!--=========================================================
	Target: install
	Function: creates an executable installer for TSTool
==========================================================-->
<target name="install" depends="jar"
	description="runs NSIS to create an executable installer">
	
	<!-- run nsis script to create .exe install -->
		<exec dir="${nsis.dir}${sep}CDSS" executable="I:\DEVELOP\NSIS\makensis.exe" >
			<arg value="TSTool_CDSS.nsi" />
	</exec>
	
</target>
	
<!--========================================================
	Target: costello
	Function: runs the Costello editor for Abbot
=========================================================-->
<target name="costello">

	<java dir="." classname="${costello}" fork="true" >
		<jvmarg value="-Djava.compiler=NONE" />
		<classpath refid="classpath" />
	</java>

</target>

<!--========================================================
	Target: testGui
	Function: runs Abbot script files using Junit framework
=========================================================-->
<target name="testGUI" depends="compile">

	<!-- compile Regression Test (old java regTest)
	<javac srcdir="${GUIRegTest.dir}${sep}src" destdir="${buildwork.dir}" classpathref="classpath" debug="on" fork="yes" listfiles="true" deprecation="true" executable="${executable}" compiler="${compiler}" />

	<java dir="GUI" classname="junit.extensions.abbot.ScriptFixture" fork="true" >
		<jvmarg value="-mx256m" />
		<jvmarg value="-Djava.compiler=NONE" />
		<arg value="test/regression/scripts/smokeTest.xml" />
		<classpath refid="classpath" />
	</java>
	-->
	
	<!-- run perl script to parse output and display results -->
	<exec dir="${regTest.dir}${sep}" executable="perl" >
		<arg value="runTests.pl" />
	</exec>

</target>

<!--===============================================================
	Target: CDSS_Gen_Exe
	Function: Generate the TSTool.exe file by calling Jsmooth with
	the properties file needed
================================================================-->
<target name="CDSS_Gen_Exe" description="generate CDSS TSTool.exe" >
	
	<!--
	<exec dir="installer${sep}CDSS" 
		executable=".${sep}installer${sep}CDSS${sep}jsmoothcmd.exe" >
		<arg value="" />
	</exec>
	-->
	
</target>
	
<!--===================================================
	Target:   help
	Function: prints out info on targets and properties
====================================================-->
<target name="help">

	<echo>
		
TARGET         FUNCTION
===========================================================
compile        compiles source code

compileTest    compiles the test source code

test           runs the junit tests for this product

clean          removes the build directories

CDSS_runDev    runs the application using class files using CDSS env.
		
RTi_runDev     runs the application using class files using RTi env.
		
CDSS_runOp     runs the application from the dist jar file using CDSS env.

RTi_runOp      runs the application from the dist jar file using RTi env.

javadoc        generates javadocs from source code

jar            copies class files into a single jar file in dist    
		
install        creates an executable installer in the installer dir

regTest        runs a regression test and stores results in regression/results dir
	
help           shows the help for this build file
===========================================================
	
	</echo>

</target>


</project>


